using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Symposium_DTOs.PosModel_Info
{
    [DisplayName("Ver : 2.0.0.40")]

    public class Version_2_0_0_40
    {

        public List<string> Ver_2_0_0_40 { get; }

        public Version_2_0_0_40()
        {
            Ver_2_0_0_40 = new List<string>();
            Ver_2_0_0_40.Add("DECLARE @SQL VARCHAR(MAX), @sCommand VARCHAR(20) \n"
                           + "IF NOT EXISTS (SELECT 1 FROM sys.[views] AS v WHERE v.name = 'View_DispatchPoints' ) \n"
                           + "	SET @sCommand = 'CREATE ' \n"
                           + "ELSE \n"
                           + "	SET @sCommand = 'ALTER ' \n"
                           + "SET @SQL = @sCommand + 'VIEW [dbo].[View_DispatchPoints] AS  \n"
                           + "	SELECT lst.orderDay, lst.EndOfDayId, lst.Twenty, lst.TwentyFive, lst.Thirty, lst.Forty, lst.Fifty, lst.FiftyPlus, \n"
                           + "			 lst.TotalOrders,lst.TwentyPoints,lst.TwentyFivePoints,lst.ThirtyPoints,lst.FortyPoints,lst.FiftyPoints,lst.FiftyPlusPoints, \n"
                           + "			 ROUND(CASE WHEN lst.TotalOrders <> 0 THEN	 \n"
                           + "		 		CAST(lst.TwentyPoints+lst.TwentyFivePoints+lst.ThirtyPoints+lst.FortyPoints+lst.FiftyPoints+lst.FiftyPlusPoints AS FLOAT) / (CAST(lst.TotalOrders AS FLOAT) / 10)   \n"
                           + "			 ELSE 0 END,2) Pst \n"
                           + "	FROM ( \n"
                           + "		SELECT fin.orderDay, fin.EndOfDayId, fin.Twenty, fin.TwentyFive, fin.Thirty, fin.Forty, fin.Fifty, fin.FiftyPlus, \n"
                           + "			 fin.Twenty+fin.TwentyFive+fin.Thirty+fin.Forty+fin.Fifty+fin.FiftyPlus TotalOrders, \n"
                           + "			 (fin.Twenty * 10) TwentyPoints, (fin.TwentyFive * 8) TwentyFivePoints,  \n"
                           + "			 (fin.Thirty * 4) ThirtyPoints, (fin.Forty * 0) FortyPoints, (fin.Fifty * (-1)) FiftyPoints, (fin.FiftyPlus * (-30)) FiftyPlusPoints \n"
                           + "		FROM ( \n"
                           + "			SELECT a.orderDay, a.EndOfDayId, SUM(a.Twenty) Twenty, SUM(a.TwentyFive) TwentyFive, SUM(a.Thirty) Thirty, SUM(a.Forty) Forty, \n"
                           + "				   SUM(a.Fifty) Fifty, SUM(a.FiftyPlus) FiftyPlus  \n"
                           + "			FROM (  \n"
                           + "				SELECT o.id, CAST(CONVERT(VARCHAR(10),CASE WHEN ISNULL(o.EndOfDayId,0) = 0 THEN o.[Day] ELSE eod.FODay END, 120) AS DATETIME) orderDay, ISNULL(o.EndOfDayId,0) EndOfDayId, \n"
                           + "					CASE WHEN DATEDIFF(MINUTE, os.startTime, os.endTime) < 20 THEN 1 ELSE 0 END Twenty, \n"
                           + "					CASE WHEN DATEDIFF(MINUTE,os.startTime, os.endTime) >= 20 AND DATEDIFF(MINUTE,os.startTime, os.endTime) <= 25 THEN 1 ELSE 0 END TwentyFive, \n"
                           + "					CASE WHEN DATEDIFF(MINUTE,os.startTime, os.endTime) > 25 AND DATEDIFF(MINUTE,os.startTime, os.endTime) <= 30 THEN 1 ELSE 0 END Thirty, \n"
                           + "					CASE WHEN DATEDIFF(MINUTE,os.startTime, os.endTime) > 30 AND DATEDIFF(MINUTE,os.startTime, os.endTime) <= 40 THEN 1 ELSE 0 END Forty, \n"
                           + "					CASE WHEN DATEDIFF(MINUTE,os.startTime, os.endTime) > 40 AND DATEDIFF(MINUTE,os.startTime, os.endTime) <= 50 THEN 1 ELSE 0 END Fifty, \n"
                           + "					CASE WHEN DATEDIFF(MINUTE,os.startTime, os.endTime) > 50  THEN 1 ELSE 0 END FiftyPlus \n"
                           + "				FROM [Order] AS o \n"
                           + "				LEFT OUTER JOIN EndOfDay AS eod ON eod.Id = o.EndOfDayId \n"
                           + "				CROSS APPLY ( \n"
                           + "					select MIN(os.TimeChanged) startTime,MAX(os.TimeChanged) endTime  \n"
                           + "					from OrderStatus os \n"
                           + "					where os.OrderId = o.Id and os.Status in (1,4) \n"
                           + "				) os \n"
                           + "				CROSS APPLY ( \n"
                           + "					SELECT TOP 1 od.OrderId \n"
                           + "					FROM OrderDetail AS od  \n"
                           + "					INNER JOIN OrderDetailInvoices AS odi ON odi.OrderDetailId = od.Id \n"
                           + "					INNER JOIN Invoices AS i ON i.Id = odi.InvoicesId AND ISNULL(i.IsDeleted,0) = 0 AND ISNULL(i.IsVoided,0) = 0 \n"
                           + "					WHERE od.OrderId = o.Id	 \n"
                           + "				) od \n"
                           + "				WHERE YEAR(os.startTime) > 1910 AND  YEAR(os.endTime) > 1910 and o.ExtType = 5 \n"
                           + "			) a \n"
                           + "			GROUP BY a.orderDay, a.EndOfDayId \n"
                           + "		) fin \n"
                           + "	) lst' \n"
                           + "EXEC(@SQL)	");
            Ver_2_0_0_40.Add("DECLARE @SQL VARCHAR(MAX), @sCommand VARCHAR(20) \n"
                           + "IF NOT EXISTS (SELECT 1 FROM sys.[views] AS v WHERE v.name = 'VIEW_RPT01_InvoiceHeader_Report') \n"
                           + "	SET @sCommand = 'CREATE ' \n"
                           + "ELSE \n"
                           + "	SET @sCommand = 'ALTER ' \n"
                           + "SET @SQL = @sCommand + '	 \n"
                           + "VIEW [dbo].[VIEW_RPT01_InvoiceHeader_Report] AS    \n"
                           + "	SELECT i.Id InvoiceId     \n"
                           + "		, i.TableSum TableTotal     \n"
                           + "		, 0 PaymentTypeId     \n"
                           + "		, ''false'' PrintKitchen     \n"
                           + "		, ISNULL(pid.[Description]     \n"
                           + "		, it.[Description]) ReceiptTypeDescription     \n"
                           + "		, d.[Description] DepartmentTypeDescription     \n"
                           + "		, NULL PaidAmount     \n"
                           + "		, st.[Description] SalesTypeDescription     \n"
                           + "		, NULL ItemsCount     \n"
                           + "		, ISNULL(o.Couver,0) Couver     \n"
                           + "		, NULL PrintFiscalSign     \n"
                           + "		, 0 FiscalType     \n"
                           + "		, NULL DetailsId     \n"
                           + "		, pid.InvoiceId InvoiceIndex     \n"
                           + "		, ISNULL(t.Code,'''') TableNo     \n"
                           + "		, ISNULL(trTop.Room,'''') Room     \n"
                           + "		, ISNULL(s.LastName,'''') Waiter     \n"
                           + "		, ISNULL(s.Code,'''') WaiterNo     \n"
                           + "		, i.PosInfoId Pos     \n"
                           + "		, ISNULL(pif.[Description],'''') PosDescr     \n"
                           + "		, d.[Description] DepartmentDesc     \n"
                           + "		, pif.DepartmentId Department     \n"
                           + "		, ISNULL(a.AccountDescription, ISNULL(i.PaymentsDesc,'''')) AccountDescription     \n"
                           + "		, CASE WHEN ISNULL(isd.CustomerName,'''') <> '''' THEN isd.CustomerName     \n"
                           + "							WHEN ISNULL(trTop.GuestName,'''') <> '''' THEN trTop.GuestName     \n"
                           + "							ELSE ''Πελάτης Λιανικής'' END CustomerName     \n"
                           + "		, ISNULL(isd.BillingAddress,'''') CustomerAddress     \n"
                           + "		, ISNULL(isd.ShippingAddress,'''') CustomerDeliveryAddress     \n"
                           + "		, ISNULL(isd.Phone,'''') CustomerPhone     \n"
                           + "		, ISNULL(isd.[Floor],'''') [Floor]     \n"
                           + "		, ISNULL(isd.BillingCity,'''') City     \n"
                           + "		, ISNULL(isd.CustomerRemarks,'''') CustomerComments     \n"
                           + "		, ISNULL(isd.BillingVatNo,'''') CustomerAfm     \n"
                           + "		, ISNULL(isd.BillingDOY,'''') CustomerDoy     \n"
                           + "		, ISNULL(isd.BillingJob,'''') CustomerJob     \n"
                           + "		, ISNULL(isd.BillingName,'''') CompanyName     \n"
                           + "		, NULL RegNo     \n"
                           + "		, NULL SumOfLunches     \n"
                           + "		, NULL SumofConsumedLunches     \n"
                           + "		, ISNULL(trTop.BoardCode,'''') GuestTerm     \n"
                           + "		, ISNULL(trTop.Adults,0) Adults     \n"
                           + "		, ISNULL(trTop.Children,0) Kids     \n"
                           + "		, it.[Type] InvoiceType     \n"
                           + "		, 0 TotalVat     \n"
                           + "		, 0 TotalVat1     \n"
                           + "		, 0 TotalVat2     \n"
                           + "		, 0 TotalVat3     \n"
                           + "		, 0 TotalVat4     \n"
                           + "		, 0 TotalVat5     \n"
                           + "		, CASE WHEN i.Discount <> 0 THEN i.Discount ELSE ISNULL(odi.Discount,0) END TotalDiscount     \n"
                           + "		, 0 Bonus     \n"
                           + "		, 0 PriceList     \n"
                           + "		, i.[Counter] ReceiptNo      \n"
                           + "		, i.OrderNo OrderNo     \n"
                           + "		, NULL OrderComments     \n"
                           + "		, ISNULL(i.Net,0) TotalNet     \n"
                           + "		, ISNULL(i.Total,0) Total     \n"
                           + "		, NULL Change     \n"
                           + "		, ISNULL(i.CashAmount,0) CashAmount     \n"
                           + "		, ISNULL(i.BuzzerNumber,'''') BuzzerNumber     \n"
                           + "		, i.IsVoided IsVoid     \n"
                           + "		, NULL CreditTransactions     \n"
                           + "		, hpo.start_time     \n"
                           + "		, hpo.Payment     \n"
                           + "		, o.ExtType     \n"
                           + "		, CASE WHEN (ISNULL(stTime.StringValue,'''') = '''') OR (LOWER(LTRIM(RTRIM(stTime.StringValue))) = ''null'') then dateadd(mi,40,[day]) ELSE CAST(stTime.StringValue as DATETIME) END DeliveryTime     \n"
                           + "		, payWay.StringValue paymentMethod     \n"
                           + "		, ISNULL(isd.ShippingCity,'''') ShippingCity     \n"
                           + "		, CASE WHEN ISNULL(LTRIM(RTRIM(invTypeCode.StringValue)),'''') = ''7'' then ''ΤΙΜΟΛΟΓΙΟ'' else ''ΑΠΟΔΕΙΞΗ'' end invoiceTypeDescr     \n"
                           + "		, ISNULL(bell.StringValue,'''') BellName     \n"
                           + "		, CASE WHEN ISNULL(with_couvert.StringValue,'''') = '''' OR LOWER(LTRIM(RTRIM(with_couvert.StringValue))) = ''null'' THEN ''Δεν υπάρχει επιλογή''     \n"
                           + "					WHEN LOWER(LTRIM(RTRIM(with_couvert.StringValue))) = ''true'' THEN ''Με μαχαιρ/να''        \n"
                           + "		ELSE ''Χωρίς μαχαιρ/να'' END CouverDescr     \n"
                           + "		, ISNULL(isd.BillingZipCode,'''') BillingZipCode     \n"
                           + "		, ISNULL(isd.ShippingZipCode,'''') ShippingZipCode     \n"
                           + "		, ISNULL(company_name.StringValue,'''') ShippingCompany     \n"
                           + "		, o.ExtKey    \n"
                           + "		, case when LOWER(ISNULL(rendezvous.StringValue,''false'')) = ''false'' then 0 else 1 end rendezvous    \n"
                           + "		, [day] recievDate     \n"
                           + "		, o.OrderNotes    \n"
                           + "		, o.StoreNotes    \n"
                           + "		, o.CustomerNotes    \n"
                           + "		, o.CustomerSecretNotes    \n"
                           + "		, o.CustomerLastOrderNotes    \n"
                           + "		, o.DA_IsPaid    \n"
                           + "		, o.IsDelay    \n"
                           + "		, o.ItemsChanged    \n"
                           + "		, ISNULL(dcsa.Notes,'''') ShippingNotes   \n"
                           + "		, ISNULL(dcba.Notes,'''') BillingNotes       \n"
                           + "		,isnull(i.EndOfDayId,0) as endofdayid      \n"
                           + "		, os_0.TimeChanged ReceivedTime         \n"
                           + "		, os_1.TimeChanged PreparingTime   \n"
                           + "		, os_2.TimeChanged PreparedTime   \n"
                           + "		, os_3.TimeChanged ReadyTime   \n"
                           + "		, os_4.TimeChanged OnroadTime   \n"
                           + "		, os_5.TimeChanged CanceledTime   \n"
                           + "		, os_6.TimeChanged CompleteTime   \n"
                           + "		, os_7.TimeChanged ReturnedTime   \n"
                           + "		, StoreOrder.EstTakeoutDate   \n"
                           + "		, CASE WHEN YEAR(os_6.TimeChanged) > 2000 AND os_6.TimeChanged > StoreOrder.EstTakeoutDate THEN 1   \n"
                           + "			WHEN YEAR(os_6.TimeChanged) > 2000 AND os_6.TimeChanged < StoreOrder.EstTakeoutDate THEN 0   \n"
                           + "			WHEN StoreOrder.EstTakeoutDate < GETDATE() THEN 1 ELSE 0 END DelayedOrder   \n"
                           + "		, CASE WHEN YEAR(os_6.TimeChanged) > 2000 AND os_6.TimeChanged > StoreOrder.EstTakeoutDate THEN CONVERT(VARCHAR(10), StoreOrder.EstTakeoutDate - os_6.TimeChanged, 108)   \n"
                           + "			WHEN YEAR(os_6.TimeChanged) > 2000 AND os_6.TimeChanged < StoreOrder.EstTakeoutDate THEN ''0''   \n"
                           + "			WHEN StoreOrder.EstTakeoutDate < GETDATE() THEN CONVERT(VARCHAR(10), GETDATE() - StoreOrder.EstTakeoutDate, 108)   \n"
                           + "		ELSE ''0'' END DelayedTime   \n"
                           + "		, MaxStatus.Status   \n"
                           + "		, CASE WHEN MaxStatus.Status = 0 THEN ''Received''   \n"
                           + "			   WHEN MaxStatus.Status = 1 THEN ''Preparing''   \n"
                           + "			   WHEN MaxStatus.Status = 2 THEN ''Prepared''   \n"
                           + "			   WHEN MaxStatus.Status = 3 THEN ''Ready''   \n"
                           + "			   WHEN MaxStatus.Status = 4 THEN ''Onroad''   \n"
                           + "			   WHEN MaxStatus.Status = 5 THEN ''Canceled''   \n"
                           + "			   WHEN MaxStatus.Status = 6 THEN ''Complete''   \n"
                           + "			   WHEN MaxStatus.Status = 7 THEN ''Returned''   \n"
                           + "		  END MaxStatusDescr  \n"
                           + "		  , ISNULL(o.OrderOrigin,-1) OrderOrigin  \n"
                           + "		  , ISNULL(o.DA_Origin, -1) DA_Origin   \n"
                           + "		  , CASE WHEN isnull(i.EndOfDayId,0) < 1 then cast(convert(varchar(10), i.day, 120) as datetime)  \n"
                           + "			else cast(convert(varchar(10), eod.FODay, 120) as datetime) end invoiceDay  \n"
                           + "	FROM Invoices i     \n"
                           + "	left outer join EndOfDay eod on eod.Id = i.EndOfDayId \n"
                           + "	INNER JOIN InvoiceTypes it ON it.Id = i.InvoiceTypeId     \n"
                           + "	LEFT OUTER JOIN PosInfoDetail pid ON pid.Id = i.PosInfoDetailId     \n"
                           + "	OUTER APPLY (    \n"
                           + "		select sum(o.couver) couver, o.ExtKey, o.ExtType, o.ExtObj,    \n"
                           + "		o.OrderNotes,o.StoreNotes,o.CustomerNotes,o.CustomerSecretNotes,o.CustomerLastOrderNotes,     \n"
                           + "		o.DA_IsPaid, o.IsDelay, o.ItemsChanged, o.OrderOrigin, o.DA_Origin    \n"
                           + "		FROM (     \n"
                           + "			SELECT distinct o.id, o.couver, o.ExtKey, o.ExtType, o.ExtObj,o.OrderNotes,o.StoreNotes,    \n"
                           + "					o.CustomerNotes,o.CustomerSecretNotes,o.CustomerLastOrderNotes, ISNULL(o.DA_IsPaid,0) DA_IsPaid,    \n"
                           + "					ISNULL(o.IsDelay,0) IsDelay, isnull(o.ItemsChanged,0) ItemsChanged, o.OrderOrigin, o.DA_Origin    \n"
                           + "			from OrderDetailInvoices odi    \n"
                           + "			inner join OrderDetail od on od.id = odi.OrderDetailId    \n"
                           + "			inner join [Order] o on o.Id = od.OrderId    \n"
                           + "			where odi.InvoicesId = i.Id    \n"
                           + "		) o       \n"
                           + "		GROUP BY o.ExtKey, o.ExtType, o.ExtObj, o.OrderNotes,o.StoreNotes,o.CustomerNotes,    \n"
                           + "			o.CustomerSecretNotes,o.CustomerLastOrderNotes, o.DA_IsPaid, o.IsDelay, o.ItemsChanged, o.OrderOrigin, o.DA_Origin     \n"
                           + "	) o    \n"
                           + "	OUTER APPLY (     \n"
                           + "		SELECT MAX(hpo.status_time) start_time, MAX(hpo.Payment) Payment, MAX(hpo.room) room     \n"
                           + "		FROM HitPosOrders hpo     \n"
                           + "		WHERE hpo.orderno = CAST(LTRIM(RTRIM(o.ExtKey)) AS INT)    \n"
                           + "	) hpo     \n"
                           + "	OUTER APPLY (     \n"
                           + "		select top 1 *     \n"
                           + "		from HitPosCustomers hpc     \n"
                           + "		where hpc.customerid = hpo.room     \n"
                           + "	) hpc     \n"
                           + "	INNER JOIN PosInfo pif ON pif.Id = i.PosInfoId     \n"
                           + "	INNER JOIN Department d ON d.Id = pif.DepartmentId     \n"
                           + "	OUTER APPLY (      \n"
                           + "		SELECT odi.SalesTypeId, SUM(odi.Discount) Discount, SUM(odi.Net) Net, SUM(odi.Total) Total      \n"
                           + "		FROM OrderDetailInvoices odi      \n"
                           + "		WHERE odi.InvoicesId = i.Id     \n"
                           + "		GROUP BY odi.SalesTypeId     \n"
                           + "	) odi     \n"
                           + "	OUTER APPLY (     \n"
                           + "		SELECT TOP 1 *     \n"
                           + "		FROM SalesType st WHERE st.Id = odi.SalesTypeId        \n"
                           + "	) st     \n"
                           + "	LEFT OUTER JOIN [Table] t ON t.Id = i.TableId     \n"
                           + "	OUTER APPLY (     \n"
                           + "		SELECT TOP 1 ISNULL(g.Room,'''') Room , tr.AccountId     \n"
                           + "				, ISNULL(g.FirstName,'''') + '' '' + ISNULL(g.LastName,'''') GuestName     \n"
                           + "				, g.Id GuestId , g.BoardCode , g.Adults , g.Children     \n"
                           + "		FROM Transactions tr     \n"
                           + "		LEFT OUTER JOIN Invoice_Guests_Trans igt ON igt.TransactionId = tr.Id     \n"
                           + "		LEFT OUTER JOIN Guest g ON g.Id = igt.GuestId     \n"
                           + "		WHERE tr.InvoicesId = i.Id        \n"
                           + "	) trTop     \n"
                           + "	INNER JOIN Staff s ON s.Id = i.StaffId     \n"
                           + "	OUTER APPLY (     \n"
                           + "		SELECT TOP 1 a.[Description] AccountDescription     \n"
                           + "		FROM Accounts a        \n"
                           + "		WHERE a.Id = trTop.AccountId     \n"
                           + "	) a     \n"
                           + "	LEFT OUTER JOIN InvoiceShippingDetails isd ON isd.InvoicesId = i.Id     \n"
                           + "	LEFT OUTER JOIN Delivery_CustomersShippingAddress AS dcsa ON dcsa.ID = isd.ShippingAddressId   \n"
                           + "	LEFT OUTER JOIN Delivery_CustomersBillingAddress AS dcba ON dcba.ID = isd.BillingAddressId   \n"
                           + "	outer apply (     \n"
                           + "		select *     \n"
                           + "		from dbo.parseJSON(o.ExtObj)     \n"
                           + "		where Name = ''end_time''     \n"
                           + "	) stTime     \n"
                           + "	outer apply (     \n"
                           + "		select *     \n"
                           + "		from dbo.parseJSON(o.ExtObj)     \n"
                           + "		where Name = ''payment_method''     \n"
                           + "	) payWay     \n"
                           + "	outer apply (     \n"
                           + "		select *     \n"
                           + "		from dbo.parseJSON(o.ExtObj)     \n"
                           + "		where Name = ''bell''     \n"
                           + "	) bell     \n"
                           + "	outer apply (     \n"
                           + "		select *     \n"
                           + "		from dbo.parseJSON(o.ExtObj)     \n"
                           + "		where Name = ''with_couvert''     \n"
                           + "	) with_couvert     \n"
                           + "	outer apply (     \n"
                           + "		select *     \n"
                           + "		from dbo.parseJSON(o.ExtObj)     \n"
                           + "		where Name = ''InvoiceCode''     \n"
                           + "	) invTypeCode     \n"
                           + "	outer apply (     \n"
                           + "		select *     \n"
                           + "		from dbo.parseJSON(o.ExtObj)     \n"
                           + "		where Name = ''company_name''     \n"
                           + "	) company_name     \n"
                           + "	outer apply (     \n"
                           + "		select *     \n"
                           + "		from dbo.parseJSON(o.ExtObj)     \n"
                           + "		where Name = ''rendezvous''     \n"
                           + "	) rendezvous   \n"
                           + "	outer apply (   \n"
                           + "		select distinct o.Id, o.EstTakeoutDate   \n"
                           + "		from OrderDetailInvoices odi    \n"
                           + "		inner join OrderDetail od on od.id = odi.OrderDetailId    \n"
                           + "		inner join [Order] o on o.Id = od.OrderId    \n"
                           + "		where odi.InvoicesId = i.Id    \n"
                           + "	) StoreOrder   \n"
                           + "	outer apply (   \n"
                           + "		select ISNULL(max(os.TimeChanged),''1900-01-01'') TimeChanged   \n"
                           + "		from OrderStatus os   \n"
                           + "		where os.OrderId = StoreOrder.id and os.Status = 0   \n"
                           + "	) os_0   \n"
                           + "	outer apply (   \n"
                           + "		select ISNULL(max(os.TimeChanged),''1900-01-01'') TimeChanged   \n"
                           + "		from OrderStatus os   \n"
                           + "		where os.OrderId = StoreOrder.id and os.Status = 1   \n"
                           + "	) os_1   \n"
                           + "	outer apply (   \n"
                           + "		select ISNULL(max(os.TimeChanged),''1900-01-01'') TimeChanged   \n"
                           + "		from OrderStatus os   \n"
                           + "		where os.OrderId = StoreOrder.id and os.Status = 2   \n"
                           + "	) os_2   \n"
                           + "	outer apply (   \n"
                           + "		select ISNULL(max(os.TimeChanged),''1900-01-01'') TimeChanged   \n"
                           + "		from OrderStatus os   \n"
                           + "		where os.OrderId = StoreOrder.id and os.Status = 3   \n"
                           + "	) os_3   \n"
                           + "	outer apply (   \n"
                           + "		select ISNULL(max(os.TimeChanged),''1900-01-01'') TimeChanged   \n"
                           + "		from OrderStatus os   \n"
                           + "		where os.OrderId = StoreOrder.id and os.Status = 4   \n"
                           + "	) os_4   \n"
                           + "	outer apply (   \n"
                           + "		select ISNULL(max(os.TimeChanged),''1900-01-01'') TimeChanged   \n"
                           + "		from OrderStatus os   \n"
                           + "		where os.OrderId = StoreOrder.id and os.Status = 5   \n"
                           + "	) os_5   \n"
                           + "	outer apply (   \n"
                           + "		select ISNULL(max(os.TimeChanged),''1900-01-01'') TimeChanged   \n"
                           + "		from OrderStatus os   \n"
                           + "		where os.OrderId = StoreOrder.id and os.Status = 6   \n"
                           + "	) os_6   \n"
                           + "	outer apply (   \n"
                           + "		select ISNULL(max(os.TimeChanged),''1900-01-01'') TimeChanged   \n"
                           + "		from OrderStatus os   \n"
                           + "		where os.OrderId = StoreOrder.id and os.Status = 7   \n"
                           + "	) os_7   \n"
                           + "	OUTER APPLY    \n"
                           + "	(   \n"
                           + "		SELECT oss.[Status]   \n"
                           + "		FROM    \n"
                           + "		OrderStatus oss   \n"
                           + "		CROSS APPLY (   \n"
                           + "			SELECT MAX(os.TimeChanged) TimeChanged   \n"
                           + "			FROM OrderStatus AS os   \n"
                           + "			WHERE os.OrderId = StoreOrder.Id   \n"
                           + "		) ost   \n"
                           + "		WHERE oss.OrderId = StoreOrder.Id AND oss.TimeChanged = ost.TimeChanged   \n"
                           + "	) MaxStatus' \n"
                           + "EXEC(@SQL)	");
            Ver_2_0_0_40.Add("DECLARE @SQL VARCHAR(MAX), @sCommand VARCHAR(20) \n"
                           + "IF NOT EXISTS (SELECT 1 FROM sys.[views] AS v WHERE v.name = 'View_SimpleDriversReceips') \n"
                           + "	SET @sCommand = 'CREATE ' \n"
                           + "ELSE \n"
                           + "	SET @sCommand = 'ALTER ' \n"
                           + "SET @SQL = @sCommand + 'view [dbo].[View_SimpleDriversReceips] as  \n"
                           + "	select 0 grp, -1 id, MAX(a.stime) stime, ''1900-01-01'' TimeChanged, -1 status, 0 total, \n"
                           + "		'''' CustomerName,'''' ShippingAddress,'''' ShippingCity,'''' ShippingZipCode,'''' Phone,''1900-01-01'' TransactDay,0 Amount, \n"
                           + "		a.LastName LastName,a.FirstName FirstName, a.invDay, a.selectDay, SUM(a.TransactTotal) TransactTotal,  \n"
                           + "		SUM(a.CCTotal) CCTotal, SUM(a.OnTheRoadTotal) OnTheRoadTotal, sum(a.OpenCash) OpenCash, a.EndOfDayId , '''' AccountDescr, \n"
                           + "		0 OrderNo, 0 ReceiptNo \n"
                           + "	from ( \n"
                           + "		select '''' stime, s.LastName, s.FirstName, isnull(t.EndOfDayId,0) EndOfDayId,  \n"
                           + "			CAST(CONVERT(VARCHAR(10),CASE WHEN isnull(i.endofdayid,0) < 1 then i.Day else eod.FoDay end, 120) as DATETIME) invDay, \n"
                           + "			CAST(CONVERT(VARCHAR(10),CASE WHEN isnull(i.endofdayid,0) < 1 then i.Day else eod.FoDay end, 120) as DATETIME) selectDay, \n"
                           + "			sum(t.Amount) TransactTotal, 0 CCTotal, 0 OnTheRoadTotal, 0 OpenCash  \n"
                           + "		from Transactions t \n"
                           + "		inner join Invoices i on i.Id = t.InvoicesId \n"
                           + "		inner join staff s on s.Id = i.StaffId \n"
                           + "		left outer join EndOfDay eod on eod.id = i.endofdayid \n"
                           + "		where isnull(t.isdeleted,0) = 0 \n"
                           + "		group by s.LastName, s.FirstName, isnull(t.EndOfDayId,0),  \n"
                           + "			CAST(CONVERT(VARCHAR(10),CASE WHEN isnull(i.endofdayid,0) < 1 then i.Day else eod.FoDay end, 120) as DATETIME) \n"
                           + "		union all \n"
                           + "		select '''' stime,s.LastName, s.FirstName, isnull(t.EndOfDayId,0) EndOfDayId, \n"
                           + "			CAST(CONVERT(VARCHAR(10),CASE WHEN isnull(i.endofdayid,0) < 1 then i.Day else eod.FoDay end, 120) as DATETIME) invDay, \n"
                           + "			CAST(CONVERT(VARCHAR(10),CASE WHEN isnull(i.endofdayid,0) < 1 then i.Day else eod.FoDay end, 120) as DATETIME) selectDay, \n"
                           + "			0 total, ISNULL(sum(t.Amount),0) CCTotal, 0 OnTheRoadTotal, 0 OpenCash  \n"
                           + "		from Transactions t \n"
                           + "		inner join Accounts a on a.Id = t.AccountId and a.Type = 4. \n"
                           + "		inner join Invoices i on i.Id = t.InvoicesId \n"
                           + "		inner join staff s on s.Id = i.StaffId \n"
                           + "		Left outer join EndOfDay eod on eod.id = i.endofdayid \n"
                           + "		where isnull(t.isdeleted,0) = 0 \n"
                           + "		group by s.LastName, s.FirstName, isnull(t.EndOfDayId,0),  \n"
                           + "			CAST(CONVERT(VARCHAR(10),CASE WHEN isnull(i.endofdayid,0) < 1 then i.Day else eod.FoDay end, 120) as DATETIME) \n"
                           + "		union all \n"
                           + "		select '''' stime,s.LastName, s.FirstName, isnull(t.EndOfDayId,0) EndOfDayId, \n"
                           + "			CAST(CONVERT(VARCHAR(10),CASE WHEN isnull(i.endofdayid,0) < 1 then i.Day else eod.FoDay end, 120) as DATETIME) invDay, \n"
                           + "			CAST(CONVERT(VARCHAR(10),CASE WHEN isnull(i.endofdayid,0) < 1 then i.Day else eod.FoDay end, 120) as DATETIME) selectDay, \n"
                           + "			0 total, 0 CCTotal, ISNULL(sum(t.Amount),0) OnTheRoadTotal, 0 OpenCash  \n"
                           + "		from transactions t \n"
                           + "		cross apply  \n"
                           + "		( \n"
                           + "			select distinct odi.invoicesId \n"
                           + "			from OrderDetailInvoices odi \n"
                           + "			inner join orderdetail od on od.id = odi.orderdetailid \n"
                           + "			cross apply ( \n"
                           + "				select top 1 * \n"
                           + "				from orderstatus os  \n"
                           + "				where os.orderid = od.orderid \n"
                           + "				order by id desc \n"
                           + "			) os \n"
                           + "			where odi.InvoicesId = t.InvoicesId and os.status = 4 \n"
                           + "		) a \n"
                           + "		inner join Invoices i on i.Id = t.InvoicesId \n"
                           + "		inner join staff s on s.Id = i.StaffId \n"
                           + "		Left outer join EndOfDay eod on eod.id = i.endofdayid \n"
                           + "		where isnull(t.isdeleted,0) = 0 \n"
                           + "		group by s.LastName, s.FirstName, isnull(t.EndOfDayId,0),  \n"
                           + "			CAST(CONVERT(VARCHAR(10),CASE WHEN isnull(i.endofdayid,0) < 1 then i.Day else eod.FoDay end, 120) as DATETIME) \n"
                           + "		union all \n"
                           + "		select CONVERT(VARCHAR(5),t.Day, 108) stime,s.LastName, s.FirstName, isnull(t.EndOfDayId,0) EndOfDayId, \n"
                           + "			CAST(CONVERT(VARCHAR(10),CASE WHEN isnull(t.endofdayid,0) < 1 then t.Day else eod.FoDay end, 120) as DATETIME) invDay, \n"
                           + "			CAST(CONVERT(VARCHAR(10),CASE WHEN isnull(t.endofdayid,0) < 1 then t.Day else eod.FoDay end, 120) as DATETIME) selectDay, \n"
                           + "			0 total, 0 CCTotal, 0 OnTheRoadTotal, ISNULL(sum(t.Amount),0) OpenCash  \n"
                           + "		from Transactions t \n"
                           + "		inner join Staff s on s.Id = t.StaffId \n"
                           + "		inner join TransactionTypes tt on tt.Code = t.TransactionType and tt.Code = 1 \n"
                           + "		Left outer join EndOfDay eod on eod.id = t.endofdayid \n"
                           + "		where isnull(t.isdeleted,0) = 0 \n"
                           + "		group by s.LastName, s.FirstName, isnull(t.EndOfDayId,0),  \n"
                           + "			CAST(CONVERT(VARCHAR(10),CASE WHEN isnull(t.endofdayid,0) < 1 then t.Day else eod.FoDay end, 120) as DATETIME),  \n"
                           + "			CONVERT(VARCHAR(5),t.Day, 108) \n"
                           + "	) a \n"
                           + "	group by a.LastName,a.FirstName, a.EndOfDayId, a.invDay , a.selectDay \n"
                           + "	 \n"
                           + "	union all  \n"
                           + " \n"
                           + "	select 1 grp, o.id, convert(varchar(5),inv.TransactDay,108) stime, os.TimeChanged,  \n"
                           + "			os.Status, o.Total, \n"
                           + "			inv.CustomerName, inv.ShippingAddress, inv.ShippingCity, inv.ShippingZipCode, \n"
                           + "			inv.Phone, inv.TransactDay, inv.Amount, inv.LastName, inv.FirstName, o.Day invDay, inv.selectDay,  \n"
                           + "			0 TransactTotal, 0 CCTotal, 0 OnTheRoadTotal, 0 OpenCash, ISNULL(o.EndOfDayId,0) EndOfDayId, inv.AccountDescr, \n"
                           + "			o.OrderNo, o.ReceiptNo \n"
                           + "	from [Order] o \n"
                           + "	cross apply ( \n"
                           + "		select top 1 os.Status, os.TimeChanged \n"
                           + "		from OrderStatus os \n"
                           + "		where os.OrderId = o.Id \n"
                           + "		order by os.TimeChanged desc \n"
                           + "	) os \n"
                           + "	cross apply ( \n"
                           + "		select DISTINCT ISNULL(inv.CustomerName,''Store Order'') CustomerName, ISNULL(inv.ShippingAddress,'''') ShippingAddress,  \n"
                           + "			ISNULL(inv.ShippingCity,'''') ShippingCity,  \n"
                           + "			ISNULL(inv.ShippingZipCode,'''') ShippingZipCode, ISNULL(inv.Phone,'''') Phone, t.Day TransactDay, t.Amount, \n"
                           + "			s.LastName, s.FirstName, \n"
                           + "			CAST(CONVERT(VARCHAR(10),CASE WHEN isnull(i.endofdayid,0) < 1 then i.Day else eod.FoDay end, 120) as DATETIME) selectDay, \n"
                           + "			a.Description AccountDescr \n"
                           + "		from OrderDetail od \n"
                           + "		inner join OrderDetailInvoices odi on odi.orderdetailid = od.Id \n"
                           + "		inner join Invoices i on i.Id = odi.InvoicesId and ISNULL(i.IsDeleted,0) = 0 and ISNULL(i.IsVoided,0) = 0 \n"
                           + "		inner join InvoiceTypes it on it.Id = i.InvoiceTypeId and it.Type in (1,7) \n"
                           + "		left outer join InvoiceShippingDetails inv on inv.InvoicesId = odi.InvoicesId \n"
                           + "		left outer join Transactions t on t.InvoicesId = odi.InvoicesId \n"
                           + "		inner join Accounts a on a.Id = t.AccountId \n"
                           + "		inner join Staff s on s.Id = i.StaffId \n"
                           + "		left outer join EndOfDay eod on eod.Id = i.EndOfDayId \n"
                           + "		where od.OrderId = o.Id \n"
                           + "	) inv' \n"
                           + "EXEC(@SQL)	");
            Ver_2_0_0_40.Add("DECLARE @SQL VARCHAR(MAX), @sCommand VARCHAR(20) \n"
                           + "IF NOT EXISTS (SELECT 1 FROM sys.[views] AS v WHERE v.name = 'View_SimpleTameio') \n"
                           + "	SET @sCommand = 'CREATE ' \n"
                           + "ELSE \n"
                           + "	SET @sCommand = 'ALTER ' \n"
                           + "SET @SQL = @sCommand + 'view [dbo].[View_SimpleTameio] as  \n"
                           + "	select 1 grp, s.Description, count(i.id) Receipts, sum(total) totalAmount,  \n"
                           + "		CAST(convert(varchar(10),CASE WHEN ISNULL(i.EndOfDayId,0) = 0 then i.day else eod.FODay END,120) as datetime) invDay, ISNULL(i.EndOfDayId,0) EndOfDayId \n"
                           + "	from invoices i \n"
                           + "	inner join InvoiceTypes it on it.Id = i.InvoiceTypeId and it.Type not in (2,3,8) \n"
                           + "	cross apply ( \n"
                           + "		select top 1 odi.SalesTypeId \n"
                           + "		from OrderDetailInvoices odi \n"
                           + "		where odi.InvoicesId = i.Id \n"
                           + "	) odi \n"
                           + "	inner join SalesType s on s.Id = odi.SalesTypeId \n"
                           + "	left outer join Endofday eod on eod.id = i.EndOfDayId \n"
                           + "	where ISNULL(i.IsDeleted,0) = 0 and ISNULL(i.IsVoided,0) = 0 \n"
                           + "	group by s.Description, CAST(convert(varchar(10),CASE WHEN ISNULL(i.EndOfDayId,0) = 0 then i.day else eod.FODay END,120) as datetime),i.EndOfDayId \n"
                           + "	union all \n"
                           + "	select 2 grp, CASE WHEN a.type = 6 then ''Ticket Restaurant'' else a.Description end Description, count(i.id) Receipts, sum(t.Amount) totalAmount,  \n"
                           + "		CAST(convert(varchar(10),CASE WHEN ISNULL(i.EndOfDayId,0) = 0 then t.day else eod.FODay END,120) as datetime) invDay, ISNULL(i.EndOfDayId,0) EndOfDayId \n"
                           + "	from invoices i \n"
                           + "	inner join Transactions t on t.InvoicesId = i.Id and ISNULL(t.isdeleted,0) = 0 \n"
                           + "	inner join Accounts a on a.id = t.AccountId and a.Type in (4,6) \n"
                           + "	left outer join Endofday eod on eod.id = i.EndOfDayId \n"
                           + "	where ISNULL(i.IsDeleted,0) = 0 and ISNULL(i.IsVoided,0) = 0 \n"
                           + "	group by a.Description, a.type,  \n"
                           + "		CAST(convert(varchar(10),CASE WHEN ISNULL(i.EndOfDayId,0) = 0 then t.day else eod.FODay END,120) as datetime), i.EndOfDayId \n"
                           + "	union all \n"
                           + "	select 3 grp, ''Grand Total'' Description, count(i.id) Receipts, sum(t.Amount) totalAmount,  \n"
                           + "		CAST(convert(varchar(10),CASE WHEN ISNULL(i.EndOfDayId,0) = 0 then t.day else eod.FODay END,120) as datetime) invDay, ISNULL(i.EndOfDayId,0) EndOfDayId \n"
                           + "	from invoices i \n"
                           + "	inner join Transactions t on t.InvoicesId = i.Id and ISNULL(t.isdeleted,0) = 0 \n"
                           + "	inner join Accounts a on a.id = t.AccountId and a.Type not in (4,6) \n"
                           + "	left outer join Endofday eod on eod.id = i.EndOfDayId \n"
                           + "	where ISNULL(i.IsDeleted,0) = 0 and ISNULL(i.IsVoided,0) = 0 \n"
                           + "	group by CAST(convert(varchar(10),CASE WHEN ISNULL(i.EndOfDayId,0) = 0 then t.day else eod.FODay END,120) as datetime), i.EndOfDayId \n"
                           + "	union all \n"
                           + "	select 4 grp, case when it.Type = 7 then ''Τιμολόγιο'' \n"
                           + "					   when it.Type = 3 then ''Επιστροφή'' \n"
                           + "					   when it.Type = 5 then ''Staff Food'' \n"
                           + "				  else ''Φιλοξενία'' end Description,  \n"
                           + "		count(i.id) Receipts, sum(CASE WHEN it.Type = 5 then odi.total else i.Total end) totalAmount,  \n"
                           + "		CAST(convert(varchar(10),CASE WHEN ISNULL(i.EndOfDayId,0) = 0 then i.day else eod.FODay END,120) as datetime) invDay, ISNULL(i.EndOfDayId,0) EndOfDayId \n"
                           + "	from invoices i \n"
                           + "	inner join InvoiceTypes it on it.Id = i.InvoiceTypeId and it.Type in (3,5,7,4) \n"
                           + "	outer apply ( \n"
                           + "		select sum(odi.Qty * pl.Price) total \n"
                           + "		from OrderDetailInvoices odi \n"
                           + "		inner join Pricelist p on p.DAId = 1 \n"
                           + "		inner join PricelistDetail pl on pl.PricelistId = p.Id and  \n"
                           + "			(pl.ProductId = case when ISNULL(odi.IsExtra,0) = 0 then odi.ProductId else -10 end or  \n"
                           + "			pl.IngredientId = case when ISNULL(odi.IsExtra,0) = 1 then odi.ProductId else -10 end) \n"
                           + "		where odi.InvoicesId = i.Id \n"
                           + "	) odi \n"
                           + "	left outer join Endofday eod on eod.id = i.EndOfDayId \n"
                           + "	group by it.type, CAST(convert(varchar(10),CASE WHEN ISNULL(i.EndOfDayId,0) = 0 then i.day else eod.FODay END,120) as datetime), i.EndOfDayId' \n"
                           + "EXEC(@SQL)	");
            Ver_2_0_0_40.Add("ALTER VIEW [dbo].[VIEW_RPT01_InvoiceHeader] AS    \n"
                            + "	SELECT i.Id InvoiceId     \n"
                            + "		, i.TableSum TableTotal     \n"
                            + "		, 0 PaymentTypeId     \n"
                            + "		, 'false' PrintKitchen     \n"
                            + "		, ISNULL(pid.[Description]     \n"
                            + "		, it.[Description]) ReceiptTypeDescription     \n"
                            + "		, d.[Description] DepartmentTypeDescription     \n"
                            + "		, NULL PaidAmount     \n"
                            + "		, st.[Description] SalesTypeDescription     \n"
                            + "		, NULL ItemsCount     \n"
                            + "		, ISNULL(o.Couver,0) Couver     \n"
                            + "		, NULL PrintFiscalSign     \n"
                            + "		, 0 FiscalType     \n"
                            + "		, NULL DetailsId     \n"
                            + "		, pid.InvoiceId InvoiceIndex     \n"
                            + "		, ISNULL(t.Code,'') TableNo     \n"
                            + "		, ISNULL(trTop.Room,'') Room     \n"
                            + "		, ISNULL(s.LastName,'') Waiter     \n"
                            + "		, ISNULL(s.Code,'') WaiterNo     \n"
                            + "		, i.PosInfoId Pos     \n"
                            + "		, ISNULL(pif.[Description],'') PosDescr     \n"
                            + "		, d.[Description] DepartmentDesc     \n"
                            + "		, pif.DepartmentId Department     \n"
                            + "		, ISNULL(a.AccountDescription, ISNULL(i.PaymentsDesc,'')) AccountDescription     \n"
                            + "		, CASE WHEN ISNULL(isd.CustomerName,'') <> '' THEN isd.CustomerName     \n"
                            + "							WHEN ISNULL(trTop.GuestName,'') <> '' THEN trTop.GuestName     \n"
                            + "							ELSE 'Πελάτης Λιανικής' END CustomerName     \n"
                            + "		, ISNULL(isd.BillingAddress,'') CustomerAddress     \n"
                            + "		, ISNULL(isd.ShippingAddress,'') CustomerDeliveryAddress     \n"
                            + "		, ISNULL(isd.Phone,'') CustomerPhone     \n"
                            + "		, ISNULL(isd.[Floor],'') [Floor]     \n"
                            + "		, ISNULL(isd.BillingCity,'') City     \n"
                            + "		, ISNULL(isd.CustomerRemarks,'') CustomerComments     \n"
                            + "		, ISNULL(isd.BillingVatNo,'') CustomerAfm     \n"
                            + "		, ISNULL(isd.BillingDOY,'') CustomerDoy     \n"
                            + "		, ISNULL(isd.BillingJob,'') CustomerJob     \n"
                            + "		, ISNULL(isd.BillingName,'') CompanyName     \n"
                            + "		, NULL RegNo     \n"
                            + "		, NULL SumOfLunches     \n"
                            + "		, NULL SumofConsumedLunches     \n"
                            + "		, ISNULL(trTop.BoardCode,'') GuestTerm     \n"
                            + "		, ISNULL(trTop.Adults,0) Adults     \n"
                            + "		, ISNULL(trTop.Children,0) Kids     \n"
                            + "		, it.[Type] InvoiceType     \n"
                            + "		, 0 TotalVat     \n"
                            + "		, 0 TotalVat1     \n"
                            + "		, 0 TotalVat2     \n"
                            + "		, 0 TotalVat3     \n"
                            + "		, 0 TotalVat4     \n"
                            + "		, 0 TotalVat5     \n"
                            + "		, CASE WHEN i.Discount <> 0 THEN i.Discount ELSE ISNULL(odi.Discount,0) END TotalDiscount     \n"
                            + "		, 0 Bonus     \n"
                            + "		, 0 PriceList     \n"
                            + "		, i.[Counter] ReceiptNo      \n"
                            + "		, i.OrderNo OrderNo     \n"
                            + "		, NULL OrderComments     \n"
                            + "		, ISNULL(i.Net,0) TotalNet     \n"
                            + "		, ISNULL(i.Total,0) Total     \n"
                            + "		, NULL Change     \n"
                            + "		, ISNULL(i.CashAmount,0) CashAmount     \n"
                            + "		, ISNULL(i.BuzzerNumber,'') BuzzerNumber     \n"
                            + "		, i.IsVoided IsVoid     \n"
                            + "		, NULL CreditTransactions     \n"
                            + "		, hpo.start_time     \n"
                            + "		, hpo.Payment     \n"
                            + "		, o.ExtType     \n"
                            + "		, CASE WHEN (ISNULL(stTime.StringValue,'') = '') OR (LOWER(LTRIM(RTRIM(stTime.StringValue))) = 'null') then dateadd(mi,40,[day]) ELSE CAST(stTime.StringValue as DATETIME) END DeliveryTime     \n"
                            + "		, payWay.StringValue paymentMethod     \n"
                            + "		, ISNULL(isd.ShippingCity,'') ShippingCity     \n"
                            + "		, CASE WHEN ISNULL(LTRIM(RTRIM(invTypeCode.StringValue)),'') = '7' then 'ΤΙΜΟΛΟΓΙΟ' else 'ΑΠΟΔΕΙΞΗ' end invoiceTypeDescr     \n"
                            + "		, ISNULL(bell.StringValue,'') BellName     \n"
                            + "		, CASE WHEN ISNULL(with_couvert.StringValue,'') = '' OR LOWER(LTRIM(RTRIM(with_couvert.StringValue))) = 'null' THEN 'Δεν υπάρχει επιλογή'     \n"
                            + "					WHEN LOWER(LTRIM(RTRIM(with_couvert.StringValue))) = 'true' THEN 'Με μαχαιρ/να'        \n"
                            + "		ELSE 'Χωρίς μαχαιρ/να' END CouverDescr     \n"
                            + "		, ISNULL(isd.BillingZipCode,'') BillingZipCode     \n"
                            + "		, ISNULL(isd.ShippingZipCode,'') ShippingZipCode     \n"
                            + "		, ISNULL(company_name.StringValue,'') ShippingCompany     \n"
                            + "		, o.ExtKey    \n"
                            + "		, case when LOWER(ISNULL(rendezvous.StringValue,'false')) = 'false' then 0 else 1 end rendezvous    \n"
                            + "		, [day] recievDate     \n"
                            + "		, o.OrderNotes    \n"
                            + "		, o.StoreNotes    \n"
                            + "		, o.CustomerNotes    \n"
                            + "		, o.CustomerSecretNotes    \n"
                            + "		, o.CustomerLastOrderNotes    \n"
                            + "		, o.DA_IsPaid    \n"
                            + "		, o.IsDelay    \n"
                            + "		, o.ItemsChanged    \n"
                            + "		, ISNULL(dcsa.Notes,'') ShippingNotes   \n"
                            + "		, ISNULL(dcba.Notes,'') BillingNotes       \n"
                            + "		,isnull(i.EndOfDayId,0) as endofdayid      \n"
                            + "		, os_0.TimeChanged ReceivedTime         \n"
                            + "		, os_1.TimeChanged PreparingTime   \n"
                            + "		, os_2.TimeChanged PreparedTime   \n"
                            + "		, os_3.TimeChanged ReadyTime   \n"
                            + "		, os_4.TimeChanged OnroadTime   \n"
                            + "		, os_5.TimeChanged CanceledTime   \n"
                            + "		, os_6.TimeChanged CompleteTime   \n"
                            + "		, os_7.TimeChanged ReturnedTime   \n"
                            + "		, StoreOrder.EstTakeoutDate   \n"
                            + "		, CASE WHEN YEAR(os_6.TimeChanged) > 2000 AND os_6.TimeChanged > StoreOrder.EstTakeoutDate THEN 1   \n"
                            + "			WHEN YEAR(os_6.TimeChanged) > 2000 AND os_6.TimeChanged < StoreOrder.EstTakeoutDate THEN 0   \n"
                            + "			WHEN StoreOrder.EstTakeoutDate < GETDATE() THEN 1 ELSE 0 END DelayedOrder   \n"
                            + "		, CASE WHEN YEAR(os_6.TimeChanged) > 2000 AND os_6.TimeChanged > StoreOrder.EstTakeoutDate THEN CONVERT(VARCHAR(10), StoreOrder.EstTakeoutDate - os_6.TimeChanged, 108)   \n"
                            + "			WHEN YEAR(os_6.TimeChanged) > 2000 AND os_6.TimeChanged < StoreOrder.EstTakeoutDate THEN '0'   \n"
                            + "			WHEN StoreOrder.EstTakeoutDate < GETDATE() THEN CONVERT(VARCHAR(10), GETDATE() - StoreOrder.EstTakeoutDate, 108)   \n"
                            + "		ELSE '0' END DelayedTime   \n"
                            + "		, MaxStatus.Status   \n"
                            + "		, CASE WHEN MaxStatus.Status = 0 THEN 'Received'   \n"
                            + "			   WHEN MaxStatus.Status = 1 THEN 'Preparing'   \n"
                            + "			   WHEN MaxStatus.Status = 2 THEN 'Prepared'   \n"
                            + "			   WHEN MaxStatus.Status = 3 THEN 'Ready'   \n"
                            + "			   WHEN MaxStatus.Status = 4 THEN 'Onroad'   \n"
                            + "			   WHEN MaxStatus.Status = 5 THEN 'Canceled'   \n"
                            + "			   WHEN MaxStatus.Status = 6 THEN 'Complete'   \n"
                            + "			   WHEN MaxStatus.Status = 7 THEN 'Returned'   \n"
                            + "		  END MaxStatusDescr  \n"
                            + "		  , ISNULL(o.OrderOrigin,-1) OrderOrigin  \n"
                            + "		  , ISNULL(o.DA_Origin, -1) DA_Origin   \n"
                            + "		  , cast(convert(varchar(10), i.day, 120) as datetime) invoiceDay  \n"
                            + "	FROM Invoices i     \n"
                            + "	INNER JOIN InvoiceTypes it ON it.Id = i.InvoiceTypeId     \n"
                            + "	LEFT OUTER JOIN PosInfoDetail pid ON pid.Id = i.PosInfoDetailId     \n"
                            + "	OUTER APPLY (    \n"
                            + "		select sum(o.couver) couver, o.ExtKey, o.ExtType, o.ExtObj,    \n"
                            + "		o.OrderNotes,o.StoreNotes,o.CustomerNotes,o.CustomerSecretNotes,o.CustomerLastOrderNotes,     \n"
                            + "		o.DA_IsPaid, o.IsDelay, o.ItemsChanged, o.OrderOrigin, o.DA_Origin    \n"
                            + "		FROM (     \n"
                            + "			SELECT distinct o.id, o.couver, o.ExtKey, o.ExtType, o.ExtObj,o.OrderNotes,o.StoreNotes,    \n"
                            + "					o.CustomerNotes,o.CustomerSecretNotes,o.CustomerLastOrderNotes, ISNULL(o.DA_IsPaid,0) DA_IsPaid,    \n"
                            + "					ISNULL(o.IsDelay,0) IsDelay, isnull(o.ItemsChanged,0) ItemsChanged, o.OrderOrigin, o.DA_Origin    \n"
                            + "			from OrderDetailInvoices odi    \n"
                            + "			inner join OrderDetail od on od.id = odi.OrderDetailId    \n"
                            + "			inner join [Order] o on o.Id = od.OrderId    \n"
                            + "			where odi.InvoicesId = i.Id    \n"
                            + "		) o       \n"
                            + "		GROUP BY o.ExtKey, o.ExtType, o.ExtObj, o.OrderNotes,o.StoreNotes,o.CustomerNotes,    \n"
                            + "			o.CustomerSecretNotes,o.CustomerLastOrderNotes, o.DA_IsPaid, o.IsDelay, o.ItemsChanged, o.OrderOrigin, o.DA_Origin     \n"
                            + "	) o    \n"
                            + "	OUTER APPLY (     \n"
                            + "		SELECT MAX(hpo.status_time) start_time, MAX(hpo.Payment) Payment, MAX(hpo.room) room     \n"
                            + "		FROM HitPosOrders hpo     \n"
                            + "		WHERE hpo.orderno = CAST(LTRIM(RTRIM(o.ExtKey)) AS INT)    \n"
                            + "	) hpo     \n"
                            + "	OUTER APPLY (     \n"
                            + "		select top 1 *     \n"
                            + "		from HitPosCustomers hpc     \n"
                            + "		where hpc.customerid = hpo.room     \n"
                            + "	) hpc     \n"
                            + "	INNER JOIN PosInfo pif ON pif.Id = i.PosInfoId     \n"
                            + "	INNER JOIN Department d ON d.Id = pif.DepartmentId     \n"
                            + "	OUTER APPLY (      \n"
                            + "		SELECT odi.SalesTypeId, SUM(odi.Discount) Discount, SUM(odi.Net) Net, SUM(odi.Total) Total      \n"
                            + "		FROM OrderDetailInvoices odi      \n"
                            + "		WHERE odi.InvoicesId = i.Id     \n"
                            + "		GROUP BY odi.SalesTypeId     \n"
                            + "	) odi     \n"
                            + "	OUTER APPLY (     \n"
                            + "		SELECT TOP 1 *     \n"
                            + "		FROM SalesType st WHERE st.Id = odi.SalesTypeId        \n"
                            + "	) st     \n"
                            + "	LEFT OUTER JOIN [Table] t ON t.Id = i.TableId     \n"
                            + "	OUTER APPLY (     \n"
                            + "		SELECT TOP 1 ISNULL(g.Room,'') Room , tr.AccountId     \n"
                            + "				, ISNULL(g.FirstName,'') + ' ' + ISNULL(g.LastName,'') GuestName     \n"
                            + "				, g.Id GuestId , g.BoardCode , g.Adults , g.Children     \n"
                            + "		FROM Transactions tr     \n"
                            + "		LEFT OUTER JOIN Invoice_Guests_Trans igt ON igt.TransactionId = tr.Id     \n"
                            + "		LEFT OUTER JOIN Guest g ON g.Id = igt.GuestId     \n"
                            + "		WHERE tr.InvoicesId = i.Id        \n"
                            + "	) trTop     \n"
                            + "	INNER JOIN Staff s ON s.Id = i.StaffId     \n"
                            + "	OUTER APPLY (     \n"
                            + "		SELECT TOP 1 a.[Description] AccountDescription     \n"
                            + "		FROM Accounts a        \n"
                            + "		WHERE a.Id = trTop.AccountId     \n"
                            + "	) a     \n"
                            + "	LEFT OUTER JOIN InvoiceShippingDetails isd ON isd.InvoicesId = i.Id     \n"
                            + "	LEFT OUTER JOIN Delivery_CustomersShippingAddress AS dcsa ON dcsa.ID = isd.ShippingAddressId   \n"
                            + "	LEFT OUTER JOIN Delivery_CustomersBillingAddress AS dcba ON dcba.ID = isd.BillingAddressId   \n"
                            + "	outer apply (     \n"
                            + "		select *     \n"
                            + "		from dbo.parseJSON(o.ExtObj)     \n"
                            + "		where Name = 'end_time'     \n"
                            + "	) stTime     \n"
                            + "	outer apply (     \n"
                            + "		select *     \n"
                            + "		from dbo.parseJSON(o.ExtObj)     \n"
                            + "		where Name = 'payment_method'     \n"
                            + "	) payWay     \n"
                            + "	outer apply (     \n"
                            + "		select *     \n"
                            + "		from dbo.parseJSON(o.ExtObj)     \n"
                            + "		where Name = 'bell'     \n"
                            + "	) bell     \n"
                            + "	outer apply (     \n"
                            + "		select *     \n"
                            + "		from dbo.parseJSON(o.ExtObj)     \n"
                            + "		where Name = 'with_couvert'     \n"
                            + "	) with_couvert     \n"
                            + "	outer apply (     \n"
                            + "		select *     \n"
                            + "		from dbo.parseJSON(o.ExtObj)     \n"
                            + "		where Name = 'InvoiceCode'     \n"
                            + "	) invTypeCode     \n"
                            + "	outer apply (     \n"
                            + "		select *     \n"
                            + "		from dbo.parseJSON(o.ExtObj)     \n"
                            + "		where Name = 'company_name'     \n"
                            + "	) company_name     \n"
                            + "	outer apply (     \n"
                            + "		select *     \n"
                            + "		from dbo.parseJSON(o.ExtObj)     \n"
                            + "		where Name = 'rendezvous'     \n"
                            + "	) rendezvous   \n"
                            + "	outer apply (   \n"
                            + "		select distinct o.Id, o.EstTakeoutDate   \n"
                            + "		from OrderDetailInvoices odi    \n"
                            + "		inner join OrderDetail od on od.id = odi.OrderDetailId    \n"
                            + "		inner join [Order] o on o.Id = od.OrderId    \n"
                            + "		where odi.InvoicesId = i.Id    \n"
                            + "	) StoreOrder   \n"
                            + "	outer apply (   \n"
                            + "		select ISNULL(max(os.TimeChanged),'1900-01-01') TimeChanged   \n"
                            + "		from OrderStatus os   \n"
                            + "		where os.OrderId = StoreOrder.id and os.Status = 0   \n"
                            + "	) os_0   \n"
                            + "	outer apply (   \n"
                            + "		select ISNULL(max(os.TimeChanged),'1900-01-01') TimeChanged   \n"
                            + "		from OrderStatus os   \n"
                            + "		where os.OrderId = StoreOrder.id and os.Status = 1   \n"
                            + "	) os_1   \n"
                            + "	outer apply (   \n"
                            + "		select ISNULL(max(os.TimeChanged),'1900-01-01') TimeChanged   \n"
                            + "		from OrderStatus os   \n"
                            + "		where os.OrderId = StoreOrder.id and os.Status = 2   \n"
                            + "	) os_2   \n"
                            + "	outer apply (   \n"
                            + "		select ISNULL(max(os.TimeChanged),'1900-01-01') TimeChanged   \n"
                            + "		from OrderStatus os   \n"
                            + "		where os.OrderId = StoreOrder.id and os.Status = 3   \n"
                            + "	) os_3   \n"
                            + "	outer apply (   \n"
                            + "		select ISNULL(max(os.TimeChanged),'1900-01-01') TimeChanged   \n"
                            + "		from OrderStatus os   \n"
                            + "		where os.OrderId = StoreOrder.id and os.Status = 4   \n"
                            + "	) os_4   \n"
                            + "	outer apply (   \n"
                            + "		select ISNULL(max(os.TimeChanged),'1900-01-01') TimeChanged   \n"
                            + "		from OrderStatus os   \n"
                            + "		where os.OrderId = StoreOrder.id and os.Status = 5   \n"
                            + "	) os_5   \n"
                            + "	outer apply (   \n"
                            + "		select ISNULL(max(os.TimeChanged),'1900-01-01') TimeChanged   \n"
                            + "		from OrderStatus os   \n"
                            + "		where os.OrderId = StoreOrder.id and os.Status = 6   \n"
                            + "	) os_6   \n"
                            + "	outer apply (   \n"
                            + "		select ISNULL(max(os.TimeChanged),'1900-01-01') TimeChanged   \n"
                            + "		from OrderStatus os   \n"
                            + "		where os.OrderId = StoreOrder.id and os.Status = 7   \n"
                            + "	) os_7   \n"
                            + "	OUTER APPLY    \n"
                            + "	(   \n"
                            + "		SELECT oss.[Status]   \n"
                            + "		FROM    \n"
                            + "		OrderStatus oss   \n"
                            + "		CROSS APPLY (   \n"
                            + "			SELECT MAX(os.TimeChanged) TimeChanged   \n"
                            + "			FROM OrderStatus AS os   \n"
                            + "			WHERE os.OrderId = StoreOrder.Id   \n"
                            + "		) ost   \n"
                            + "		WHERE oss.OrderId = StoreOrder.Id AND oss.TimeChanged = ost.TimeChanged   \n"
                            + "	) MaxStatus \n"
                            + "	where i.endofdayid is null");
        }
    }
}
