using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Symposium_DTOs.PosModel_Info
{
    [DisplayName("Ver : 2.0.0.6")]
    public class Version_2_0_0_6
    {
        public List<string> Ver_2_0_0_6 { get; }

        public Version_2_0_0_6()
        {
            Ver_2_0_0_6 = new List<string>();
            Ver_2_0_0_6.Add("CREATE PROCEDURE EndOfDayTotal @posInfo BIGINT AS \n"
                           + "BEGIN \n"
                           + "	/*Gets data from tables Invoice, Transaction, InvoiceType and Account and return total records for each case*/ \n"
                           + "	SELECT * \n"
                           + "	FROM ( \n"
                           + "		/*	Accounts Total Data*/ \n"
                           + "		SELECT 0 id, a.[Description], COUNT(i.id) ReceiptCount, ISNULL(SUM(t.Amount),0) Amount, a.Id AccountId, a.[Type] AccountType \n"
                           + "		FROM Transactions AS t \n"
                           + "		INNER JOIN Accounts AS a ON a.id = t.AccountId \n"
                           + "		INNER JOIN Invoices AS i ON i.id = t.InvoicesId AND ISNULL(i.IsPrinted,0) = 1 AND ISNULL(i.IsVoided,0) = 0 \n"
                           + "		INNER JOIN InvoiceTypes AS it ON it.Id = i.InvoiceTypeId  AND it.[Type] NOT IN (2,3,8,10) \n"
                           + "		WHERE t.PosInfoId = @posInfo AND t.EndOfDayId IS NULL AND ISNULL(t.IsDeleted,0) <> 1 AND  \n"
                           + "			((NOT (t.TransactionType = 9 AND t.InOut = 1))) AND t.TransactionType NOT IN (8,7) \n"
                           + "		GROUP BY a.id, a.[Description], a.[Type] \n"
                           + "		UNION ALL \n"
                           + "		/*	Not Paid Recipies Total Data*/ \n"
                           + "		SELECT fin.Id,fin.[Description], SUM(fin.Reciepts) Reciepts, ISNULL(SUM(fin.amount),0) amount, 0 AccountId, 0 AccountType  \n"
                           + "		FROM (	 \n"
                           + "			/*	Recipies Without Transaction. The Field ID of Invoices id not in InvoicesId of Transaction */ \n"
                           + "			SELECT -99 Id, 'Not Paid' [Description], COUNT(DISTINCT(i.id)) Reciepts, ISNULL(SUM(i.Total),0) amount \n"
                           + "			FROM Invoices AS i \n"
                           + "			INNER JOIN InvoiceTypes AS it ON it.Id = i.InvoiceTypeId  AND it.[Type] NOT IN (2,3,8,10,11,12) \n"
                           + "			LEFT OUTER JOIN Transactions AS t ON t.InvoicesId = i.Id \n"
                           + "			WHERE i.PosInfoId = @posInfo AND i.EndOfDayId IS NULL AND ISNULL(i.IsPrinted,0) = 1 AND ISNULL(i.IsVoided,0) = 0 \n"
                           + "			 AND t.InvoicesId IS NULL \n"
                           + "			UNION ALL \n"
                           + "			/*	The Field IsPaid of Invoices id equal to 1 */ \n"
                           + "			SELECT -99 Id, 'Not Paid', COUNT(DISTINCT(i.id)) Reciepts, ISNULL(SUM(ISNULL(i.Total,0) - ISNULL(i.PaidTotal,0)),0) amount \n"
                           + "			FROM Invoices AS i \n"
                           + "			INNER JOIN InvoiceTypes AS it ON it.Id = i.InvoiceTypeId  AND it.[Type] NOT IN (2,3,8,10,11,12) \n"
                           + "			WHERE i.PosInfoId = @posInfo AND i.EndOfDayId IS NULL AND ISNULL(i.IsPrinted,0) = 1 AND ISNULL(i.IsVoided,0) = 0 AND ISNULL(i.IsPaid,0) = 1 \n"
                           + "		) fin \n"
                           + "		GROUP BY fin.Id, fin.[Description] \n"
                           + "		UNION ALL \n"
                           + "		/*	Recipies Total Data*/ \n"
                           + "		SELECT fin.Id,fin.Decription, SUM(fin.Reciepts) Reciepts, ISNULL(SUM(fin.amount),0) amount, 0 AccountId, 0 AccountType \n"
                           + "		FROM ( \n"
                           + "			/*	Recipies With Transaction. Id of Invoice is equal to InvoicesId of Transaction */ \n"
                           + "			SELECT-100 Id, 'Receipt Total' Decription, COUNT(i.Id) Reciepts, ISNULL(SUM(t.Amount),0) amount \n"
                           + "			FROM Transactions AS t \n"
                           + "			INNER JOIN Accounts AS a ON a.id = t.AccountId \n"
                           + "			INNER JOIN Invoices AS i ON i.id = t.InvoicesId AND ISNULL(i.IsPrinted,0) = 1 AND ISNULL(i.IsVoided,0) = 0 \n"
                           + "			INNER JOIN InvoiceTypes AS it ON it.Id = i.InvoiceTypeId  AND it.[Type] NOT IN (2,3,8,10) \n"
                           + "			WHERE t.PosInfoId = @posInfo AND t.EndOfDayId IS NULL AND ISNULL(t.IsDeleted,0) <> 1 AND  \n"
                           + "				((NOT (t.TransactionType = 9 AND t.InOut = 1))) AND t.TransactionType NOT IN (8,7) \n"
                           + "          GROUP BY a.Id, a.[Description] \n"
                           + "			UNION ALL \n"
                           + "			/*	Recipies Without Transaction. InvoicesId of Transaction is null */ \n"
                           + "			SELECT -100 Id, 'Receipt Total' [Description], COUNT(DISTINCT(i.id)) Reciepts, ISNULL(SUM(i.Total),0) amount \n"
                           + "			FROM Invoices AS i \n"
                           + "			INNER JOIN InvoiceTypes AS it ON it.Id = i.InvoiceTypeId  AND it.[Type] NOT IN (2,3,8,10,11,12) \n"
                           + "			LEFT OUTER JOIN Transactions AS t ON t.InvoicesId = i.Id \n"
                           + "			WHERE i.PosInfoId = @posInfo AND i.EndOfDayId IS NULL AND ISNULL(i.IsPrinted,0) = 1 AND ISNULL(i.IsVoided,0) = 0 \n"
                           + "			 AND t.InvoicesId IS NULL \n"
                           + "			UNION ALL \n"
                           + "			/*	Recipies Without Transaction. The Field Of Invoice IsPaid is equal to 1 */ \n"
                           + "			SELECT -100 Id, 'Receipt Total', COUNT(DISTINCT(i.id)) Reciepts, ISNULL(SUM(ISNULL(i.Total,0) - ISNULL(i.PaidTotal,0)),0) amount \n"
                           + "			FROM Invoices AS i \n"
                           + "			INNER JOIN InvoiceTypes AS it ON it.Id = i.InvoiceTypeId  AND it.[Type] NOT IN (2,3,8,10,11,12) \n"
                           + "			WHERE i.PosInfoId = @posInfo AND i.EndOfDayId IS NULL AND ISNULL(i.IsPrinted,0) = 1 AND ISNULL(i.IsVoided,0) = 0 AND ISNULL(i.IsPaid,0) = 1 \n"
                           + "		) fin \n"
                           + "		GROUP BY fin.Id, fin.Decription \n"
                           + "		UNION ALL \n"
                           + "		/*	Not Invoiced Recipies Total Data*/ \n"
                           + "		SELECT  -101 Id, 'Not Invoiced', COUNT(DISTINCT(i.id)) Reciepts,  \n"
                           + "			ISNULL(SUM(CASE WHEN ISNULL(i.IsVoided,0) = 1 AND it.[Type] = 8 THEN (-1)*i.Total ELSE i.Total END),0) amount, 0 AccountId, 0 AccountType  \n"
                           + "		FROM Invoices AS i \n"
                           + "		INNER JOIN InvoiceTypes AS it ON it.Id = i.InvoiceTypeId  AND it.[Type] IN (2,8) \n"
                           + "		WHERE i.PosInfoId = @posInfo AND i.EndOfDayId IS NULL AND ISNULL(i.IsPrinted,0) = 1 AND ISNULL(i.IsInvoiced,0) = 0 \n"
                           + "		UNION ALL \n"
                           + "		/*	Canceld Recipies Total Data*/ \n"
                           + "		SELECT -102 Id, 'Canceled', COUNT(DISTINCT(i.id)) Reciepts, ISNULL((-1)*SUM(i.Total),0) amount, 0 AccountId, 0 AccountType \n"
                           + "		FROM Invoices AS i \n"
                           + "		INNER JOIN InvoiceTypes AS it ON it.Id = i.InvoiceTypeId  AND it.[Type] IN (3) \n"
                           + "		WHERE i.PosInfoId = @posInfo AND i.EndOfDayId IS NULL AND ISNULL(i.IsPrinted,0) = 1 AND ISNULL(i.IsVoided,0) = 1 \n"
                           + "		UNION ALL \n"
                           + "		/*	Not Printed Recipies Total Data*/ \n"
                           + "		SELECT -103 Id, 'Not Printed', COUNT(DISTINCT(i.id)) Reciepts, ISNULL(SUM(i.Total),0) amount, 0 AccountId, 0 AccountType \n"
                           + "		FROM Invoices AS i \n"
                           + "		INNER JOIN InvoiceTypes AS it ON it.Id = i.InvoiceTypeId  AND it.[Type] NOT IN (2,8,10,11,12) \n"
                           + "		WHERE i.PosInfoId = @posInfo AND i.EndOfDayId IS NULL AND ISNULL(i.IsPrinted,0) = 0 AND ISNULL(i.IsVoided,0) = 0  \n"
                           + "		UNION ALL \n"
                           + "		/*	Discount Recipies Total Data*/ \n"
                           + "		SELECT -104 Id, 'Discount Total', COUNT(DISTINCT(i.id)) Reciepts, ISNULL(SUM(i.Discount),0) amount, 0 AccountId, 0 AccountType \n"
                           + "		FROM Invoices AS i \n"
                           + "		INNER JOIN InvoiceTypes AS it ON it.Id = i.InvoiceTypeId  AND it.[Type] NOT IN (2,3,8,10,12) \n"
                           + "		WHERE i.PosInfoId = @posInfo AND i.EndOfDayId IS NULL AND ISNULL(i.IsPrinted,0) = 1 AND ISNULL(i.IsVoided,0) = 0 AND i.Discount <> 0 \n"
                           + "		UNION ALL \n"
                           + "		/*	Couver From Recipies Total Data*/ \n"
                           + "		SELECT -105 Id, 'Couvers', COUNT(o.Id) Reciepts, ISNULL(SUM(o.Couver),0) amount, 0 AccountId, 0 AccountType \n"
                           + "		FROM [Order] AS o \n"
                           + "		WHERE o.EndOfDayId IS NULL AND o.PosId = @posInfo AND o.Couver <> 0 \n"
                           + "	) st \n"
                           + "END");
            Ver_2_0_0_6.Add("CREATE PROCEDURE dbo.EndOfDayByStaff @posInfo BIGINT AS \n"
                            + "BEGIN  \n"
                            + "	/*Gets data from tables Invoice, Transaction, InvoiceType, Account, Staff and return total records for each case and staff name*/ \n"
                            + "	SELECT * \n"
                            + "	FROM ( \n"
                            + "		/*	Accounts Total Data*/ \n"
                            + "		SELECT 0 id, a.[Description], COUNT(i.id) ReceiptCount, SUM(t.Amount) Amount, a.Id AccountID, a.[Type] AccountType, \n"
                            + "			t.StaffId, s.LastName+' '+s.FirstName staffName \n"
                            + "		FROM Transactions AS t \n"
                            + "		INNER JOIN Accounts AS a ON a.id = t.AccountId \n"
                            + "		INNER JOIN Invoices AS i ON i.id = t.InvoicesId AND ISNULL(i.IsPrinted,0) = 1 AND ISNULL(i.IsVoided,0) = 0 \n"
                            + "		INNER JOIN InvoiceTypes AS it ON it.Id = i.InvoiceTypeId  AND it.[Type] NOT IN (2,3,8,10) \n"
                            + "		INNER JOIN Staff AS s ON s.Id = t.StaffId \n"
                            + "		WHERE t.PosInfoId = @posInfo AND t.EndOfDayId IS NULL AND ISNULL(t.IsDeleted,0) <> 1 AND  \n"
                            + "			((NOT (t.TransactionType = 9 AND t.InOut = 1))) AND t.TransactionType NOT IN (8,7) \n"
                            + "		GROUP BY a.id, a.[Description], a.[Type], t.StaffId, s.LastName,s.FirstName \n"
                            + " \n"
                            + "		UNION ALL \n"
                            + "		/*	Not Paid Recipies Total Data*/ \n"
                            + "		SELECT -99 Id, 'Not Paid' [Description], SUM(fin.Reciepts) Reciepts, SUM(fin.amount) amount, 0 AccountID, 0 AccountType,  \n"
                            + "			fin.StaffId,fin.staffName  \n"
                            + "		FROM (	 \n"
                            + "			/*	Recipies Without Transaction. The Field ID of Invoices id not in InvoicesId of Transaction */ \n"
                            + "			SELECT COUNT(DISTINCT(i.id)) Reciepts, SUM(i.Total) amount, i.StaffId, s.LastName+' '+s.FirstName staffName \n"
                            + "			FROM Invoices AS i \n"
                            + "			INNER JOIN InvoiceTypes AS it ON it.Id = i.InvoiceTypeId  AND it.[Type] NOT IN (2,3,8,10,11,12) \n"
                            + "			INNER JOIN Staff AS s ON s.Id = i.StaffId \n"
                            + "			LEFT OUTER JOIN Transactions AS t ON t.InvoicesId = i.Id \n"
                            + "			WHERE i.PosInfoId = @posInfo AND i.EndOfDayId IS NULL AND ISNULL(i.IsPrinted,0) = 1 AND ISNULL(i.IsVoided,0) = 0 \n"
                            + "			 AND t.InvoicesId IS NULL \n"
                            + "			GROUP BY i.StaffId, s.LastName,s.FirstName \n"
                            + "			UNION ALL \n"
                            + "			/*	The Field IsPaid of Invoices id equal to 1 */ \n"
                            + "			SELECT COUNT(DISTINCT(i.id)) Reciepts, SUM(ISNULL(i.Total,0) - ISNULL(i.PaidTotal,0)) amount, i.StaffId, s.LastName+' '+s.FirstName \n"
                            + "			FROM Invoices AS i \n"
                            + "			INNER JOIN InvoiceTypes AS it ON it.Id = i.InvoiceTypeId  AND it.[Type] NOT IN (2,3,8,10,11,12) \n"
                            + "			INNER JOIN Staff AS s ON s.Id = i.StaffId \n"
                            + "			WHERE i.PosInfoId = @posInfo AND i.EndOfDayId IS NULL AND ISNULL(i.IsPrinted,0) = 1 AND ISNULL(i.IsVoided,0) = 0 AND ISNULL(i.IsPaid,0) = 1 \n"
                            + "			GROUP BY i.StaffId, s.LastName+' '+s.FirstName \n"
                            + "		) fin \n"
                            + "		GROUP BY fin.StaffId, fin.staffName \n"
                            + "		UNION ALL \n"
                            + "		/*	Recipies Total Data*/ \n"
                            + "		SELECT -100 Id, 'Receipt Total' Decription, SUM(fin.Reciepts) Reciepts, SUM(fin.amount) amount, 0 AccountID,0 AccountType,  \n"
                            + "			fin.StaffId,fin.staffName  \n"
                            + "		FROM ( \n"
                            + "			/*	Recipies With Transaction. Id of Invoice is equal to InvoicesId of Transaction */ \n"
                            + "			SELECT COUNT(i.Id) Reciepts, SUM(t.Amount) amount, t.StaffId, s.LastName+' '+s.FirstName staffName \n"
                            + "			FROM Transactions AS t \n"
                            + "			INNER JOIN Accounts AS a ON a.id = t.AccountId \n"
                            + "			INNER JOIN Invoices AS i ON i.id = t.InvoicesId AND ISNULL(i.IsPrinted,0) = 1 AND ISNULL(i.IsVoided,0) = 0 \n"
                            + "			INNER JOIN InvoiceTypes AS it ON it.Id = i.InvoiceTypeId  AND it.[Type] NOT IN (2,3,8,10) \n"
                            + "			INNER JOIN Staff AS s ON s.Id = t.StaffId \n"
                            + "			WHERE t.PosInfoId = @posInfo AND t.EndOfDayId IS NULL AND ISNULL(t.IsDeleted,0) <> 1 AND  \n"
                            + "				((NOT (t.TransactionType = 9 AND t.InOut = 1))) AND t.TransactionType NOT IN (8,7) \n"
                            + "			GROUP BY t.StaffId, s.LastName,s.FirstName \n"
                            + "			UNION ALL \n"
                            + "			/*	Recipies Without Transaction. InvoicesId of Transaction is null */ \n"
                            + "			SELECT COUNT(DISTINCT(i.id)) Reciepts, SUM(i.Total) amount, i.StaffId, s.LastName+' '+s.FirstName staffName \n"
                            + "			FROM Invoices AS i \n"
                            + "			INNER JOIN InvoiceTypes AS it ON it.Id = i.InvoiceTypeId  AND it.[Type] NOT IN (2,3,8,10,11,12) \n"
                            + "			INNER JOIN Staff AS s ON s.Id = i.StaffId \n"
                            + "			LEFT OUTER JOIN Transactions AS t ON t.InvoicesId = i.Id \n"
                            + "			WHERE i.PosInfoId = @posInfo AND i.EndOfDayId IS NULL AND ISNULL(i.IsPrinted,0) = 1 AND ISNULL(i.IsVoided,0) = 0 \n"
                            + "			 AND t.InvoicesId IS NULL  \n"
                            + "			GROUP BY i.StaffId, s.LastName,s.FirstName \n"
                            + "			UNION ALL \n"
                            + "			/*	Recipies Without Transaction. The Field Of Invoice IsPaid is equal to 1 */ \n"
                            + "			SELECT COUNT(DISTINCT(i.id)) Reciepts, SUM(ISNULL(i.Total,0) - ISNULL(i.PaidTotal,0)) amount, \n"
                            + "				i.StaffId, s.LastName+' '+s.FirstName \n"
                            + "			FROM Invoices AS i \n"
                            + "			INNER JOIN InvoiceTypes AS it ON it.Id = i.InvoiceTypeId  AND it.[Type] NOT IN (2,3,8,10,11,12) \n"
                            + "			INNER JOIN Staff AS s ON s.Id = i.StaffId \n"
                            + "			WHERE i.PosInfoId = @posInfo AND i.EndOfDayId IS NULL AND ISNULL(i.IsPrinted,0) = 1 AND ISNULL(i.IsVoided,0) = 0 AND ISNULL(i.IsPaid,0) = 1 \n"
                            + "			GROUP BY i.StaffId, s.LastName+' '+s.FirstName \n"
                            + "		) fin \n"
                            + "		GROUP BY fin.StaffId, fin.staffName \n"
                            + "		UNION ALL \n"
                            + "		/*	Not Invoiced Recipies Total Data*/ \n"
                            + "		SELECT  -101 Id, 'Not Invoiced' [Description], COUNT(DISTINCT(i.id)) Reciepts,  \n"
                            + "			SUM(CASE WHEN ISNULL(i.IsVoided,0) = 1 AND it.[Type] = 8 THEN (-1)*i.Total ELSE i.Total END) amount, 0 AccountID,0 AccountType,  \n"
                            + "			i.StaffId, s.LastName+' '+s.FirstName staffName \n"
                            + "		FROM Invoices AS i \n"
                            + "		INNER JOIN InvoiceTypes AS it ON it.Id = i.InvoiceTypeId  AND it.[Type] IN (2,8) \n"
                            + "		INNER JOIN Staff AS s ON s.Id = i.StaffId \n"
                            + "		WHERE i.PosInfoId = @posInfo AND i.EndOfDayId IS NULL AND ISNULL(i.IsPrinted,0) = 1 AND ISNULL(i.IsInvoiced,0) = 0 \n"
                            + "		GROUP BY i.StaffId, s.LastName+' '+s.FirstName \n"
                            + "		UNION ALL \n"
                            + "		/*	Canceld Recipies Total Data*/ \n"
                            + "		SELECT -102 Id, 'Canceled' [Description], COUNT(DISTINCT(i.id)) Reciepts, (-1)*SUM(i.Total) amount, 0 AccountID,0 AccountType,  \n"
                            + "			i.StaffId, s.LastName+' '+s.FirstName staffName \n"
                            + "		FROM Invoices AS i \n"
                            + "		INNER JOIN InvoiceTypes AS it ON it.Id = i.InvoiceTypeId  AND it.[Type] IN (3) \n"
                            + "		INNER JOIN Staff AS s ON s.Id = i.StaffId \n"
                            + "		WHERE i.PosInfoId = @posInfo AND i.EndOfDayId IS NULL AND ISNULL(i.IsPrinted,0) = 1 AND ISNULL(i.IsVoided,0) = 1 \n"
                            + "		GROUP BY i.StaffId, s.LastName+' '+s.FirstName \n"
                            + "		UNION ALL \n"
                            + "		/*	Not Printed Recipies Total Data*/ \n"
                            + "		SELECT  -103 Id, 'Not Printed' [Description], COUNT(DISTINCT(i.id)) Reciepts, SUM(i.Total) amount, 0 AccountID,0 AccountType,  \n"
                            + "			i.StaffId, s.LastName+' '+s.FirstName staffName \n"
                            + "		FROM Invoices AS i \n"
                            + "		INNER JOIN InvoiceTypes AS it ON it.Id = i.InvoiceTypeId  AND it.[Type] NOT IN (2,8,10,11,12) \n"
                            + "		INNER JOIN Staff AS s ON s.Id = i.StaffId \n"
                            + "		WHERE i.PosInfoId = @posInfo AND i.EndOfDayId IS NULL AND ISNULL(i.IsPrinted,0) = 0 AND ISNULL(i.IsVoided,0) = 0  \n"
                            + "		GROUP BY i.StaffId, s.LastName+' '+s.FirstName \n"
                            + "		UNION ALL \n"
                            + "		/*	Discount Recipies Total Data*/ \n"
                            + "		SELECT -104 Id, 'Discount Total' [Description], COUNT(DISTINCT(i.id)) Reciepts, SUM(i.Discount) amount, 0 AccountID,0 AccountType,  \n"
                            + "			i.StaffId, s.LastName+' '+s.FirstName staffName \n"
                            + "		FROM Invoices AS i \n"
                            + "		INNER JOIN InvoiceTypes AS it ON it.Id = i.InvoiceTypeId  AND it.[Type] NOT IN (2,3,8,10,12) \n"
                            + "		INNER JOIN Staff AS s ON s.Id = i.StaffId \n"
                            + "		WHERE i.PosInfoId = @posInfo AND i.EndOfDayId IS NULL AND ISNULL(i.IsPrinted,0) = 1 AND ISNULL(i.IsVoided,0) = 0 AND i.Discount <> 0 \n"
                            + "		GROUP BY i.StaffId, s.LastName+' '+s.FirstName \n"
                            + "		UNION ALL \n"
                            + "		/*	Couver From Recipies Total Data*/ \n"
                            + "		SELECT  -105 Id, 'Couvers' [Description], COUNT(o.Id) Reciepts, SUM(o.Couver) Amount, 0 AccountID,0 AccountType, o.StaffId,  \n"
                            + "			s.LastName+' '+s.FirstName staffName \n"
                            + "		FROM [Order] AS o \n"
                            + "		INNER JOIN Staff AS s ON s.Id = o.StaffId \n"
                            + "		WHERE o.EndOfDayId IS NULL AND o.PosId = @posInfo AND o.Couver <> 0 \n"
                            + "		GROUP BY o.StaffId, s.LastName+' '+s.FirstName \n"
                            + "		UNION ALL \n"
                            + "		/*	Opening Cashier. Cash and Open command from pos.  Total Data*/ \n"
                            + "		SELECT -106 id, 'Open Cashier' [Description], SUM(op.Reciepts) Reciepts, SUM(op.amount) amount, 0 AccountID,0 AccountType, op.StaffId, op.staffName \n"
                            + "		FROM ( \n"
                            + "			/*Cash from Transaction*/ \n"
                            + "			SELECT  1 Reciepts, SUM(CASE WHEN t.TransactionType = 9 THEN (-1)*t.Amount ELSE t.Amount END) amount,  \n"
                            + "				t.StaffId, s.LastName+' '+s.FirstName staffName \n"
                            + "			FROM Transactions AS t \n"
                            + "			INNER JOIN Accounts AS a ON a.id = t.AccountId AND a.[Type] = 1 \n"
                            + "			INNER JOIN Invoices AS i ON i.id = t.InvoicesId AND ISNULL(i.IsPrinted,0) = 1 AND ISNULL(i.IsVoided,0) = 0 \n"
                            + "			INNER JOIN InvoiceTypes AS it ON it.Id = i.InvoiceTypeId  AND it.[Type] NOT IN (2,3,8,10) \n"
                            + "			INNER JOIN Staff AS s ON s.Id = t.StaffId \n"
                            + "			WHERE t.PosInfoId = @posInfo AND t.EndOfDayId IS NULL AND ISNULL(t.IsDeleted,0) <> 1 AND  \n"
                            + "				((t.TransactionType = 9 AND t.InOut = 1) OR (t.TransactionType <> 9)) \n"
                            + "			GROUP BY t.StaffId, s.LastName,s.FirstName \n"
                            + "			UNION ALL \n"
                            + "			/*Open Cashier Command from pos*/ \n"
                            + "			SELECT COUNT(t.id) Reciepts, SUM(t.Amount) amount, t.StaffId, s.LastName+' '+s.FirstName staffName \n"
                            + "			FROM Transactions AS t \n"
                            + "			INNER JOIN Staff AS s ON s.Id = t.StaffId \n"
                            + "			WHERE t.EndOfDayId IS NULL AND t.PosInfoId = @posInfo AND t.TransactionType = 1 \n"
                            + "			GROUP BY t.StaffId, s.LastName,s.FirstName \n"
                            + "		) op \n"
                            + "		GROUP BY op.StaffId, op.staffName \n"
                            + "		UNION ALL \n"
                            + "		/*	Closing Cashier. Close command from pos.  Total Data*/ \n"
                            + "		SELECT -107 id, 'Close Cashier' [Description], COUNT(t.id) Reciepts, SUM(t.Amount) amount, 0 AccountID,0 AccountType,  \n"
                            + "			t.StaffId, s.LastName+' '+s.FirstName staffName \n"
                            + "		FROM Transactions AS t \n"
                            + "		INNER JOIN Staff AS s ON s.Id = t.StaffId \n"
                            + "		WHERE t.EndOfDayId IS NULL AND t.PosInfoId = @posInfo AND t.TransactionType = 2 AND  t.AccountId = 1 \n"
                            + "		GROUP BY t.StaffId, s.LastName,s.FirstName \n"
                            + "		UNION ALL \n"
                            + "		/*Total amount per account Type for closing cashier*/ \n"
                            + "		SELECT -108 id,a.[Description], a.Reciepts, a.amount, a.AccountId, a.AccountType, a.StaffId, a.staffName \n"
                            + "		FROM ( \n"
                            + "			SELECT a.[Description], COUNT(t.id) Reciepts, SUM(CASE WHEN t.TransactionType = 9 THEN (-1)*t.Amount ELSE t.Amount END) amount,  \n"
                            + "				t.AccountId, a.[Type] AccountType, t.StaffId, s.LastName+' '+s.FirstName staffName \n"
                            + "			FROM Transactions AS t \n"
                            + "			INNER JOIN Staff AS s ON s.Id = t.StaffId \n"
                            + "			INNER JOIN Accounts AS a ON a.Id = t.AccountId \n"
                            + "			WHERE t.EndOfDayId IS NULL AND t.PosInfoId = @posInfo AND ISNULL(t.IsDeleted,0) <> 1 AND  \n"
                            + "				ISNULL(t.InvoicesId,0) NOT IN  \n"
                            + "				( \n"
                            + "					SELECT i.Id \n"
                            + "					FROM Invoices AS i \n"
                            + "					WHERE i.EndOfDayId IS NULL AND i.PosInfoId = @posInfo AND ISNULL(i.IsPrinted,0) = 0	 \n"
                            + "				) AND  \n"
                            + "				((t.TransactionType = 9 AND t.InOut = 1) OR (t.TransactionType <> 9))					 \n"
                            + "			GROUP BY t.AccountId, a.[Description], a.[Type], t.StaffId, s.LastName,s.FirstName \n"
                            + "		) a \n"
                            + "		WHERE a.amount <> 0 \n"
                            + "		UNION ALL \n"
                            + "		/*Money to return the staff on ending his shift*/ \n"
                            + "		SELECT -109 id,'Total To Return' [Description], 1 Reciepts, SUM(CASE WHEN t.TransactionType = 9 THEN (-1)*t.Amount ELSE t.Amount END) amount,  \n"
                            + "			0 AccountID,0 AccountType,t.StaffId, s.LastName+' '+s.FirstName staffName \n"
                            + "		FROM Transactions AS t \n"
                            + "		INNER JOIN Staff AS s ON s.Id = t.StaffId  \n"
                            + "		INNER JOIN Accounts AS a ON a.Id = t.AccountId AND a.[Type] NOT IN (5) \n"
                            + "		WHERE t.EndOfDayId IS NULL AND t.PosInfoId = @posInfo AND  \n"
                            + "			 ((t.TransactionType = 9 AND t.InOut = 1) OR (t.TransactionType <> 9))  AND ISNULL(t.IsDeleted,0) <> 1 AND  \n"
                            + "			 ISNULL(t.InvoicesId,0) NOT IN (SELECT i.Id  \n"
                            + "											FROM Invoices AS i  \n"
                            + "											WHERE i.EndOfDayId IS NULL AND i.PosInfoId = @posInfo AND ISNULL(i.IsPrinted,0) = 0) \n"
                            + "		GROUP BY t.StaffId, s.LastName,s.FirstName \n"
                            + "	) st \n"
                            + "	ORDER BY st.StaffId, st.id DESC \n"
                            + "END");
            Ver_2_0_0_6.Add("CREATE PROCEDURE dbo.EndOfDayAnalysisByAccount @posInfo BIGINT, @staffId BIGINT, @AccountId BIGINT AS \n"
                           + "BEGIN  \n"
                           + "	/*Gets a list of invoices for a specific account ID (Cash, Credit Cards, Coplimentary each...)*/ \n"
                           + "	SELECT res.* \n"
                           + "	FROM ( \n"
                           + "		SELECT ROW_NUMBER() OVER (ORDER BY fin.ReceiptNo) ID, fin.* \n"
                           + "		FROM ( \n"
                           + "			SELECT  \n"
                           + "				i.[Day], pif.[Description] PosInfoDescription, d.[Description] DepartmentDescription, pif.Id PosInfoId, \n"
                           + "				it.Abbreviation Abbreviation, i.Cover Couver, s.FirstName + ' ' +s.LastName StaffName, s.Id StaffId, \n"
                           + "				(i.Total - ISNULL(i.Discount,0)) Total, ISNULL(i.Discount,0) Discount, ISNULL(i.PaidTotal,0) PaidTotal, \n"
                           + "				odi.ItemsCount, i.OrderNo OrderNo, i.[Counter] ReceiptNo, it.[Type] InvoiceType, ISNULL(i.IsInvoiced,0) IsInvoiced , \n"
                           + "				ISNULL(i.IsVoided,0) IsVoided, ISNULL(i.IsPaid,0) IsPaid, i.Id InvoiceId, i.Rooms Room,  \n"
                           + "				ISNULL(tb.Code,'') TableCode, ISNULL(tb.Id,0) TableId  \n"
                           + "			FROM Invoices AS i \n"
                           + "			INNER JOIN Transactions AS t ON i.Id = t.InvoicesId AND t.PosInfoId = i.PosInfoId AND \n"
                           + "				t.EndOfDayId IS NULL AND ISNULL(t.IsDeleted,0) <> 1 AND  \n"
                           + "				((NOT (t.TransactionType = 9 AND t.InOut = 1))) AND t.TransactionType NOT IN (8,7) AND t.AccountId = @AccountId \n"
                           + "			INNER JOIN PosInfo AS pif ON pif.Id = i.PosInfoId \n"
                           + "			INNER JOIN Department AS d ON d.Id = pif.DepartmentId \n"
                           + "			INNER JOIN InvoiceTypes AS it ON it.Id = i.InvoiceTypeId AND it.[Type] NOT IN (2,3,8,9) \n"
                           + "			LEFT OUTER JOIN [Table] AS tb ON tb.Id = i.TableId \n"
                           + "			INNER JOIN Staff AS s ON s.Id = i.StaffId AND  \n"
                           + "				CAST(s.Id AS VARCHAR(20)) LIKE CASE WHEN @staffId > 0 THEN CAST(@staffId AS VARCHAR(20)) ELSE '%' END \n"
                           + "			CROSS APPLY ( \n"
                           + "				SELECT ISNULL(COUNT(*),0)+ISNULL(COUNT(odg.Id),0) ItemsCount \n"
                           + "				FROM OrderDetailInvoices AS odi \n"
                           + "				OUTER APPLY ( \n"
                           + "					SELECT odg.Id  \n"
                           + "					FROM OrderDetailIgredients AS odg \n"
                           + "					WHERE odg.OrderDetailId = odi.Id	 \n"
                           + "				) odg \n"
                           + "				WHERE odi.InvoicesId = i.Id \n"
                           + "			)odi \n"
                           + "			WHERE i.EndOfDayId IS NULL AND i.PosInfoId = @posInfo AND ISNULL(i.IsPrinted,0) = 1 AND ISNULL(i.IsVoided,0) = 0 \n"
                           + "		) fin \n"
                           + "	) res \n"
                           + "	ORDER BY res.ID \n"
                           + "END");
            Ver_2_0_0_6.Add("CREATE PROCEDURE dbo.EndOfDayAnalysisNotPaid @posInfo BIGINT, @staffId BIGINT AS  \n"
                           + "BEGIN  \n"
                           + "	/*Gets a list of not paid invoices*/ \n"
                           + "	SELECT res.* \n"
                           + "	FROM ( \n"
                           + "		SELECT ROW_NUMBER() OVER (ORDER BY fin.ReceiptNo) Id, fin.[Day], pif.[Description] PosInfoDescription, d.[Description] DepartmentDescription,  \n"
                           + "			pif.Id PosInfoId, fin.Abbreviation Abbreviation, fin.Couver, s.FirstName + ' ' +s.LastName StaffName, s.Id StaffId, \n"
                           + "			fin.Total, fin.Discount, fin.PaidTotal, odi.ItemsCount, fin.OrderNo OrderNo, fin.ReceiptNo, fin.InvoiceType, fin.IsInvoiced , \n"
                           + "			fin.IsVoided, fin.IsPaid, fin.Id InvoiceId, fin.Room, ISNULL(tb.Code,'') TableCode, ISNULL(tb.Id,0) TableId \n"
                           + "		FROM ( \n"
                           + "			SELECT  i.[Day], it.Abbreviation Abbreviation, i.Cover Couver,  \n"
                           + "				(i.Total - ISNULL(i.Discount,0)) Total, ISNULL(i.Discount,0) Discount, ISNULL(i.PaidTotal,0) PaidTotal, \n"
                           + "				i.OrderNo OrderNo, i.[Counter] ReceiptNo, it.[Type] InvoiceType, ISNULL(i.IsInvoiced,0) IsInvoiced , \n"
                           + "				ISNULL(i.IsVoided,0) IsVoided, ISNULL(i.IsPaid,0) IsPaid, i.Id InvoiceId, i.Rooms Room, i.StaffId, i.TableId, \n"
                           + "				i.PosInfoId, i.Id  \n"
                           + "			FROM Invoices AS i \n"
                           + "			INNER JOIN InvoiceTypes AS it ON it.Id = i.InvoiceTypeId AND it.[Type] NOT IN (2,3,8,10,11,12) \n"
                           + "			LEFT OUTER JOIN Transactions AS t ON t.InvoicesId = i.Id AND t.EndOfDayId IS NULL \n"
                           + "			WHERE i.PosInfoId = @posInfo AND i.EndOfDayId IS NULL AND ISNULL(i.IsPrinted,0) = 1 AND ISNULL(i.IsVoided,0) = 0 AND  \n"
                           + "				t.InvoicesId IS NULL \n"
                           + "			UNION ALL \n"
                           + "			SELECT i.[Day], it.Abbreviation Abbreviation, i.Cover Couver,  \n"
                           + "				(i.Total - ISNULL(i.Discount,0)) Total, ISNULL(i.Discount,0) Discount, ISNULL(i.PaidTotal,0) PaidTotal, \n"
                           + "				i.OrderNo OrderNo, i.[Counter] ReceiptNo, it.[Type] InvoiceType, ISNULL(i.IsInvoiced,0) IsInvoiced , \n"
                           + "				ISNULL(i.IsVoided,0) IsVoided, ISNULL(i.IsPaid,0) IsPaid, i.Id InvoiceId, i.Rooms Room, i.StaffId, i.TableId, \n"
                           + "				i.PosInfoId, i.Id  \n"
                           + "			FROM Invoices AS i \n"
                           + "			INNER JOIN InvoiceTypes AS it ON it.Id = i.InvoiceTypeId AND it.[Type] NOT IN (2,3,8,10,11,12) \n"
                           + "			WHERE i.PosInfoId = @posInfo AND i.EndOfDayId IS NULL AND ISNULL(i.IsPrinted,0) = 1 AND ISNULL(i.IsVoided,0) = 0 AND ISNULL(i.IsPaid,0) = 1 \n"
                           + "		) fin \n"
                           + "		INNER JOIN PosInfo AS pif ON pif.Id = fin.PosInfoId \n"
                           + "		INNER JOIN Department AS d ON d.Id = pif.DepartmentId \n"
                           + "		LEFT OUTER JOIN [Table] AS tb ON tb.Id = fin.TableId \n"
                           + "		INNER JOIN Staff AS s ON s.Id = fin.StaffId AND  \n"
                           + "			CAST(s.Id AS VARCHAR(20)) LIKE CASE WHEN @staffId > 0 THEN CAST(@staffId AS VARCHAR(20)) ELSE '%' END \n"
                           + "		CROSS APPLY ( \n"
                           + "			SELECT ISNULL(COUNT(*),0)+ISNULL(COUNT(odg.Id),0) ItemsCount \n"
                           + "			FROM OrderDetailInvoices AS odi \n"
                           + "			OUTER APPLY ( \n"
                           + "				SELECT odg.Id  \n"
                           + "				FROM OrderDetailIgredients AS odg \n"
                           + "				WHERE odg.OrderDetailId = odi.Id	 \n"
                           + "			) odg \n"
                           + "			WHERE odi.InvoicesId = fin.Id \n"
                           + "		)odi \n"
                           + "	) res \n"
                           + "	ORDER BY res.Id \n"
                           + "END");
            Ver_2_0_0_6.Add("CREATE PROCEDURE dbo.EndOfDayAnalysisReceiptTotal @posInfo BIGINT, @staffId BIGINT AS  \n"
                           + "BEGIN  \n"
                           + "	/*Gets a list of all printed and not voieded invoices */ \n"
                           + "	SELECT res.* \n"
                           + "	FROM ( \n"
                           + "		SELECT ROW_NUMBER() OVER (ORDER BY fin.ReceiptNo) Id, fin.* \n"
                           + "		FROM ( \n"
                           + "			SELECT  \n"
                           + "				i.[Day], pif.[Description] PosInfoDescription, d.[Description] DepartmentDescription, pif.Id PosInfoId, \n"
                           + "				it.Abbreviation Abbreviation, i.Cover Couver, s.FirstName + ' ' +s.LastName StaffName, s.Id StaffId, \n"
                           + "				(i.Total - ISNULL(i.Discount,0)) Total, ISNULL(i.Discount,0) Discount, ISNULL(i.PaidTotal,0) PaidTotal, \n"
                           + "				odi.ItemsCount, i.OrderNo OrderNo, i.[Counter] ReceiptNo, it.[Type] InvoiceType, ISNULL(i.IsInvoiced,0) IsInvoiced , \n"
                           + "				ISNULL(i.IsVoided,0) IsVoided, ISNULL(i.IsPaid,0) IsPaid, i.Id InvoiceId, i.Rooms Room,  \n"
                           + "				ISNULL(tb.Code,'') TableCode, ISNULL(tb.Id,0) TableId  \n"
                           + "			FROM Invoices AS i \n"
                           + "			INNER JOIN InvoiceTypes AS it ON it.Id = i.InvoiceTypeId AND it.[Type] NOT IN (2,3,8,10) \n"
                           + "			INNER JOIN PosInfo AS pif ON pif.Id = i.PosInfoId \n"
                           + "			INNER JOIN Department AS d ON d.Id = pif.DepartmentId \n"
                           + "			LEFT OUTER JOIN [Table] AS tb ON tb.Id = i.TableId \n"
                           + "			INNER JOIN Staff AS s ON s.Id = i.StaffId AND  \n"
                           + "				CAST(s.Id AS VARCHAR(20)) LIKE CASE WHEN @staffId > 0 THEN CAST(@staffId AS VARCHAR(20)) ELSE '%' END \n"
                           + "			CROSS APPLY ( \n"
                           + "				SELECT ISNULL(COUNT(*),0)+ISNULL(COUNT(odg.Id),0) ItemsCount \n"
                           + "				FROM OrderDetailInvoices AS odi \n"
                           + "				OUTER APPLY ( \n"
                           + "					SELECT odg.Id  \n"
                           + "					FROM OrderDetailIgredients AS odg \n"
                           + "					WHERE odg.OrderDetailId = odi.Id	 \n"
                           + "				) odg \n"
                           + "				WHERE odi.InvoicesId = i.Id \n"
                           + "			)odi \n"
                           + "			CROSS APPLY( \n"
                           + "				SELECT TOP 1 t.InvoicesId \n"
                           + "				FROM Transactions AS t	 \n"
                           + "				WHERE t.EndOfDayId IS NULL AND t.PosInfoId = @posInfo AND ISNULL(t.IsDeleted,0) <> 1 AND  \n"
                           + "					((NOT (t.TransactionType = 9 AND t.InOut = 1))) AND t.TransactionType NOT IN (8,7)	AND  \n"
                           + "					t.InvoicesId = i.Id \n"
                           + "			)t \n"
                           + "			WHERE ISNULL(i.IsPrinted,0) = 1 AND ISNULL(i.IsVoided,0) = 0 AND i.PosInfoId = @posInfo AND i.EndOfDayId IS NULL   \n"
                           + "				 \n"
                           + "			 \n"
                           + "			UNION ALL \n"
                           + "			SELECT i.[Day], pif.[Description] PosInfoDescription, d.[Description] DepartmentDescription, pif.Id PosInfoId, \n"
                           + "				it.Abbreviation Abbreviation, i.Cover Couver, s.FirstName + ' ' +s.LastName StaffName, s.Id StaffId, \n"
                           + "				(i.Total - ISNULL(i.Discount,0)) Total, ISNULL(i.Discount,0) Discount, ISNULL(i.PaidTotal,0) PaidTotal, \n"
                           + "				odi.ItemsCount, i.OrderNo OrderNo, i.[Counter] ReceiptNo, it.[Type] InvoiceType, ISNULL(i.IsInvoiced,0) IsInvoiced , \n"
                           + "				ISNULL(i.IsVoided,0) IsVoided, ISNULL(i.IsPaid,0) IsPaid, i.Id InvoiceId, i.Rooms Room,  \n"
                           + "				ISNULL(tb.Code,'') TableCode, ISNULL(tb.Id,0) TableId \n"
                           + "			FROM Invoices AS i \n"
                           + "			INNER JOIN InvoiceTypes AS it ON it.Id = i.InvoiceTypeId  AND it.[Type] NOT IN (2,3,8,10,11,12) \n"
                           + "			INNER JOIN Staff AS s ON s.Id = i.StaffId AND  \n"
                           + "				CAST(s.Id AS VARCHAR(20)) LIKE CASE WHEN @staffId > 0 THEN CAST(@staffId AS VARCHAR(20)) ELSE '%' END \n"
                           + "			INNER JOIN PosInfo AS pif ON pif.Id = i.PosInfoId \n"
                           + "			INNER JOIN Department AS d ON d.Id = pif.DepartmentId \n"
                           + "			LEFT OUTER JOIN [Table] AS tb ON tb.Id = i.TableId \n"
                           + "			CROSS APPLY ( \n"
                           + "				SELECT ISNULL(COUNT(*),0)+ISNULL(COUNT(odg.Id),0) ItemsCount \n"
                           + "				FROM OrderDetailInvoices AS odi \n"
                           + "				OUTER APPLY ( \n"
                           + "					SELECT odg.Id  \n"
                           + "					FROM OrderDetailIgredients AS odg \n"
                           + "					WHERE odg.OrderDetailId = odi.Id	 \n"
                           + "				) odg \n"
                           + "				WHERE odi.InvoicesId = i.Id \n"
                           + "			)odi \n"
                           + "			LEFT OUTER JOIN Transactions AS t ON t.InvoicesId = i.Id \n"
                           + "			WHERE i.PosInfoId = @posInfo AND i.EndOfDayId IS NULL AND ISNULL(i.IsPrinted,0) = 1 AND ISNULL(i.IsVoided,0) = 0 \n"
                           + "			 AND t.InvoicesId IS NULL \n"
                           + "			 \n"
                           + "			UNION ALL \n"
                           + "			SELECT i.[Day], pif.[Description] PosInfoDescription, d.[Description] DepartmentDescription, pif.Id PosInfoId, \n"
                           + "				it.Abbreviation Abbreviation, i.Cover Couver, s.FirstName + ' ' +s.LastName StaffName, s.Id StaffId, \n"
                           + "				(i.Total - ISNULL(i.Discount,0)) Total, ISNULL(i.Discount,0) Discount, ISNULL(i.PaidTotal,0) PaidTotal, \n"
                           + "				odi.ItemsCount, i.OrderNo OrderNo, i.[Counter] ReceiptNo, it.[Type] InvoiceType, ISNULL(i.IsInvoiced,0) IsInvoiced , \n"
                           + "				ISNULL(i.IsVoided,0) IsVoided, ISNULL(i.IsPaid,0) IsPaid, i.Id InvoiceId, i.Rooms Room,  \n"
                           + "				ISNULL(tb.Code,'') TableCode, ISNULL(tb.Id,0) TableId \n"
                           + "			FROM Invoices AS i \n"
                           + "			INNER JOIN InvoiceTypes AS it ON it.Id = i.InvoiceTypeId  AND it.[Type] NOT IN (2,3,8,10,11,12) \n"
                           + "			INNER JOIN Staff AS s ON s.Id = i.StaffId AND  \n"
                           + "				CAST(s.Id AS VARCHAR(20)) LIKE CASE WHEN @staffId > 0 THEN CAST(@staffId AS VARCHAR(20)) ELSE '%' END \n"
                           + "			INNER JOIN PosInfo AS pif ON pif.Id = i.PosInfoId \n"
                           + "			INNER JOIN Department AS d ON d.Id = pif.DepartmentId \n"
                           + "			LEFT OUTER JOIN [Table] AS tb ON tb.Id = i.TableId \n"
                           + "			CROSS APPLY ( \n"
                           + "				SELECT ISNULL(COUNT(*),0)+ISNULL(COUNT(odg.Id),0) ItemsCount \n"
                           + "				FROM OrderDetailInvoices AS odi \n"
                           + "				OUTER APPLY ( \n"
                           + "					SELECT odg.Id  \n"
                           + "					FROM OrderDetailIgredients AS odg \n"
                           + "					WHERE odg.OrderDetailId = odi.Id	 \n"
                           + "				) odg \n"
                           + "				WHERE odi.InvoicesId = i.Id \n"
                           + "			)odi \n"
                           + "			WHERE i.PosInfoId = @posInfo AND i.EndOfDayId IS NULL AND ISNULL(i.IsPrinted,0) = 1 AND ISNULL(i.IsVoided,0) = 0 AND ISNULL(i.IsPaid,0) = 1 \n"
                           + "		) fin \n"
                           + "	) res \n"
                           + "	ORDER BY res.Id \n"
                           + "END");
            Ver_2_0_0_6.Add("CREATE PROCEDURE dbo.EndOfDayAnalysisNotInvoiced @posInfo BIGINT, @staffId BIGINT AS  \n"
                           + "BEGIN  \n"
                           + "	/*Gets a list of not invoiced invoices*/ \n"
                           + "	SELECT res.* \n"
                           + "	FROM ( \n"
                           + "		SELECT ROW_NUMBER() OVER (ORDER BY fin.ReceiptNo) Id, fin.* \n"
                           + "		FROM ( \n"
                           + "			SELECT  \n"
                           + "				i.[Day], pif.[Description] PosInfoDescription, d.[Description] DepartmentDescription, pif.Id PosInfoId, \n"
                           + "				it.Abbreviation Abbreviation, i.Cover Couver, s.FirstName + ' ' +s.LastName StaffName, s.Id StaffId, \n"
                           + "				(i.Total - ISNULL(i.Discount,0)) Total, ISNULL(i.Discount,0) Discount, ISNULL(i.PaidTotal,0) PaidTotal, \n"
                           + "				odi.ItemsCount, i.OrderNo OrderNo, i.[Counter] ReceiptNo, it.[Type] InvoiceType, ISNULL(i.IsInvoiced,0) IsInvoiced , \n"
                           + "				ISNULL(i.IsVoided,0) IsVoided, ISNULL(i.IsPaid,0) IsPaid, i.Id InvoiceId, i.Rooms Room,  \n"
                           + "				ISNULL(tb.Code,'') TableCode, ISNULL(tb.Id,0) TableId  \n"
                           + "			FROM Invoices AS i \n"
                           + "			INNER JOIN InvoiceTypes AS it ON it.Id = i.InvoiceTypeId AND it.[Type] IN (2,8) \n"
                           + "			INNER JOIN PosInfo AS pif ON pif.Id = i.PosInfoId \n"
                           + "			INNER JOIN Department AS d ON d.Id = pif.DepartmentId \n"
                           + "			LEFT OUTER JOIN [Table] AS tb ON tb.Id = i.TableId \n"
                           + "			INNER JOIN Staff AS s ON s.Id = i.StaffId AND  \n"
                           + "				CAST(s.Id AS VARCHAR(20)) LIKE CASE WHEN @staffId > 0 THEN CAST(@staffId AS VARCHAR(20)) ELSE '%' END \n"
                           + "			CROSS APPLY ( \n"
                           + "				SELECT ISNULL(COUNT(*),0)+ISNULL(COUNT(odg.Id),0) ItemsCount \n"
                           + "				FROM OrderDetailInvoices AS odi \n"
                           + "				OUTER APPLY ( \n"
                           + "					SELECT odg.Id  \n"
                           + "					FROM OrderDetailIgredients AS odg \n"
                           + "					WHERE odg.OrderDetailId = odi.Id	 \n"
                           + "				) odg \n"
                           + "				WHERE odi.InvoicesId = i.Id \n"
                           + "			)odi \n"
                           + "			WHERE i.PosInfoId = @posInfo AND i.EndOfDayId IS NULL AND ISNULL(i.IsPrinted,0) = 1 AND ISNULL(i.IsInvoiced,0) = 0 \n"
                           + "		) fin \n"
                           + "	) res \n"
                           + "	ORDER BY res.Id \n"
                           + "END");
            Ver_2_0_0_6.Add("CREATE PROCEDURE dbo.EndOfDayAnalysisCanceled @posInfo BIGINT, @staffId BIGINT AS  \n"
                           + "BEGIN  \n"
                           + "	/*Gets a list of canceld invoices*/ \n"
                           + "	SELECT res.* \n"
                           + "	FROM ( \n"
                           + "		SELECT ROW_NUMBER() OVER (ORDER BY fin.ReceiptNo) Id, fin.* \n"
                           + "		FROM ( \n"
                           + "			SELECT  \n"
                           + "				i.[Day], pif.[Description] PosInfoDescription, d.[Description] DepartmentDescription, pif.Id PosInfoId, \n"
                           + "				it.Abbreviation Abbreviation, i.Cover Couver, s.FirstName + ' ' +s.LastName StaffName, s.Id StaffId, \n"
                           + "				(i.Total - ISNULL(i.Discount,0)) Total, ISNULL(i.Discount,0) Discount, ISNULL(i.PaidTotal,0) PaidTotal, \n"
                           + "				odi.ItemsCount, i.OrderNo OrderNo, i.[Counter] ReceiptNo, it.[Type] InvoiceType, ISNULL(i.IsInvoiced,0) IsInvoiced , \n"
                           + "				ISNULL(i.IsVoided,0) IsVoided, ISNULL(i.IsPaid,0) IsPaid, i.Id InvoiceId, i.Rooms Room,  \n"
                           + "				ISNULL(tb.Code,'') TableCode, ISNULL(tb.Id,0) TableId  \n"
                           + "			FROM Invoices AS i \n"
                           + "			INNER JOIN InvoiceTypes AS it ON it.Id = i.InvoiceTypeId AND it.[Type] IN (3) \n"
                           + "			INNER JOIN PosInfo AS pif ON pif.Id = i.PosInfoId \n"
                           + "			INNER JOIN Department AS d ON d.Id = pif.DepartmentId \n"
                           + "			LEFT OUTER JOIN [Table] AS tb ON tb.Id = i.TableId \n"
                           + "			INNER JOIN Staff AS s ON s.Id = i.StaffId AND  \n"
                           + "				CAST(s.Id AS VARCHAR(20)) LIKE CASE WHEN @staffId > 0 THEN CAST(@staffId AS VARCHAR(20)) ELSE '%' END \n"
                           + "			CROSS APPLY ( \n"
                           + "				SELECT ISNULL(COUNT(*),0)+ISNULL(COUNT(odg.Id),0) ItemsCount \n"
                           + "				FROM OrderDetailInvoices AS odi \n"
                           + "				OUTER APPLY ( \n"
                           + "					SELECT odg.Id  \n"
                           + "					FROM OrderDetailIgredients AS odg \n"
                           + "					WHERE odg.OrderDetailId = odi.Id	 \n"
                           + "				) odg \n"
                           + "				WHERE odi.InvoicesId = i.Id \n"
                           + "			)odi \n"
                           + "			WHERE i.PosInfoId = @posInfo AND i.EndOfDayId IS NULL AND ISNULL(i.IsPrinted,0) = 1 AND ISNULL(i.IsVoided,0) = 1 \n"
                           + "		) fin \n"
                           + "	) res \n"
                           + "	ORDER BY res.Id \n"
                           + "END");
            Ver_2_0_0_6.Add("CREATE PROCEDURE dbo.EndOfDayAnalysisNotPrinted @posInfo BIGINT, @staffId BIGINT AS  \n"
                           + "BEGIN  \n"
                           + "	/*Gets a list of not printed invoices */  \n"
                           + "	SELECT res.* \n"
                           + "	FROM ( \n"
                           + "		SELECT ROW_NUMBER() OVER (ORDER BY fin.ReceiptNo) Id, fin.* \n"
                           + "		FROM ( \n"
                           + "			SELECT  \n"
                           + "				i.[Day], pif.[Description] PosInfoDescription, d.[Description] DepartmentDescription, pif.Id PosInfoId, \n"
                           + "				it.Abbreviation Abbreviation, i.Cover Couver, s.FirstName + ' ' +s.LastName StaffName, s.Id StaffId, \n"
                           + "				(i.Total - ISNULL(i.Discount,0)) Total, ISNULL(i.Discount,0) Discount, ISNULL(i.PaidTotal,0) PaidTotal, \n"
                           + "				odi.ItemsCount, i.OrderNo OrderNo, i.[Counter] ReceiptNo, it.[Type] InvoiceType, ISNULL(i.IsInvoiced,0) IsInvoiced , \n"
                           + "				ISNULL(i.IsVoided,0) IsVoided, ISNULL(i.IsPaid,0) IsPaid, i.Id InvoiceId, i.Rooms Room,  \n"
                           + "				ISNULL(tb.Code,'') TableCode, ISNULL(tb.Id,0) TableId  \n"
                           + "			FROM Invoices AS i \n"
                           + "			INNER JOIN InvoiceTypes AS it ON it.Id = i.InvoiceTypeId AND it.[Type] NOT IN (2,8,10,11,12) \n"
                           + "			INNER JOIN PosInfo AS pif ON pif.Id = i.PosInfoId \n"
                           + "			INNER JOIN Department AS d ON d.Id = pif.DepartmentId \n"
                           + "			LEFT OUTER JOIN [Table] AS tb ON tb.Id = i.TableId \n"
                           + "			INNER JOIN Staff AS s ON s.Id = i.StaffId AND  \n"
                           + "				CAST(s.Id AS VARCHAR(20)) LIKE CASE WHEN @staffId > 0 THEN CAST(@staffId AS VARCHAR(20)) ELSE '%' END \n"
                           + "			CROSS APPLY ( \n"
                           + "				SELECT ISNULL(COUNT(*),0)+ISNULL(COUNT(odg.Id),0) ItemsCount \n"
                           + "				FROM OrderDetailInvoices AS odi \n"
                           + "				OUTER APPLY ( \n"
                           + "					SELECT odg.Id  \n"
                           + "					FROM OrderDetailIgredients AS odg \n"
                           + "					WHERE odg.OrderDetailId = odi.Id	 \n"
                           + "				) odg \n"
                           + "				WHERE odi.InvoicesId = i.Id \n"
                           + "			)odi \n"
                           + "			WHERE i.PosInfoId = @posInfo AND i.EndOfDayId IS NULL AND ISNULL(i.IsPrinted,0) = 0 AND ISNULL(i.IsVoided,0) = 0 \n"
                           + "		) fin \n"
                           + "	) res \n"
                           + "	ORDER BY res.Id \n"
                           + "END");
            Ver_2_0_0_6.Add("CREATE PROCEDURE dbo.EndOfDayAnalysisDiscount @posInfo BIGINT, @staffId BIGINT AS  \n"
                           + "BEGIN  \n"
                           + "	/*Gets a list of invoices with Discount*/ \n"
                           + "	SELECT res.* \n"
                           + "	FROM ( \n"
                           + "		SELECT ROW_NUMBER() OVER (ORDER BY fin.ReceiptNo) Id, fin.* \n"
                           + "		FROM ( \n"
                           + "			SELECT  \n"
                           + "				i.[Day], pif.[Description] PosInfoDescription, d.[Description] DepartmentDescription, pif.Id PosInfoId, \n"
                           + "				it.Abbreviation Abbreviation, i.Cover Couver, s.FirstName + ' ' +s.LastName StaffName, s.Id StaffId, \n"
                           + "				(i.Total - ISNULL(i.Discount,0)) Total, ISNULL(i.Discount,0) Discount, ISNULL(i.PaidTotal,0) PaidTotal, \n"
                           + "				odi.ItemsCount, i.OrderNo OrderNo, i.[Counter] ReceiptNo, it.[Type] InvoiceType, ISNULL(i.IsInvoiced,0) IsInvoiced , \n"
                           + "				ISNULL(i.IsVoided,0) IsVoided, ISNULL(i.IsPaid,0) IsPaid, i.Id InvoiceId, i.Rooms Room,  \n"
                           + "				ISNULL(tb.Code,'') TableCode, ISNULL(tb.Id,0) TableId  \n"
                           + "			FROM Invoices AS i \n"
                           + "			INNER JOIN InvoiceTypes AS it ON it.Id = i.InvoiceTypeId AND it.[Type] NOT IN (2,8,10,11,12) \n"
                           + "			INNER JOIN PosInfo AS pif ON pif.Id = i.PosInfoId \n"
                           + "			INNER JOIN Department AS d ON d.Id = pif.DepartmentId \n"
                           + "			LEFT OUTER JOIN [Table] AS tb ON tb.Id = i.TableId \n"
                           + "			INNER JOIN Staff AS s ON s.Id = i.StaffId AND  \n"
                           + "				CAST(s.Id AS VARCHAR(20)) LIKE CASE WHEN @staffId > 0 THEN CAST(@staffId AS VARCHAR(20)) ELSE '%' END \n"
                           + "			CROSS APPLY ( \n"
                           + "				SELECT ISNULL(COUNT(*),0)+ISNULL(COUNT(odg.Id),0) ItemsCount \n"
                           + "				FROM OrderDetailInvoices AS odi \n"
                           + "				OUTER APPLY ( \n"
                           + "					SELECT odg.Id  \n"
                           + "					FROM OrderDetailIgredients AS odg \n"
                           + "					WHERE odg.OrderDetailId = odi.Id	 \n"
                           + "				) odg \n"
                           + "				WHERE odi.InvoicesId = i.Id \n"
                           + "			)odi \n"
                           + "			WHERE i.PosInfoId = @posInfo AND i.EndOfDayId IS NULL AND ISNULL(i.IsPrinted,0) = 1 AND ISNULL(i.IsVoided,0) = 0 AND  \n"
                           + "				ISNULL(i.Discount,0) <> 0 \n"
                           + "		) fin \n"
                           + "	) res \n"
                           + "	ORDER BY res.Id \n"
                           + "END");
            Ver_2_0_0_6.Add("ALTER PROCEDURE dbo.MoveDataToHistoric @Year INT AS  \n"
                           + "BEGIN  \n"
                           + "  DECLARE @bOK SMALLINT \n"
                           + " 	BEGIN TRY  \n"
                           + "		BEGIN TRANSACTION		  \n"
                           + " 		/*Table for Last End Of Year*/  \n"
                           + "		INSERT INTO EndOfYear(ClosedYear,ClosedDate,[Description])  \n"
                           + "		SELECT @Year, GETDATE(), 'End of year for season '+CAST(@Year AS VARCHAR(20))  \n"
                           + " 		 \n"
                           + " 		/*Insert values to Historic CreditAccounts*/  \n"
                           + "		INSERT INTO CreditAccounts_Hist (nYear, Id, [Description], EndOfDayId, ActivateTS, DeactivateTS)  \n"
                           + "		SELECT DISTINCT YEAR(eod.FODay) nYear, ca.Id, ca.[Description], ca.EndOfDayId, ca.ActivateTS, ca.DeactivateTS  \n"
                           + "		FROM CreditAccounts ca   \n"
                           + "		INNER JOIN EndOfDay eod ON eod.Id = ca.EndOfDayId AND YEAR(eod.FODay) <= @Year  \n"
                           + " 		 \n"
                           + " 		/*Insert values to Historic CreditCodes*/   \n"
                           + "		INSERT INTO CreditCodes_Hist(nYear,Id,[Description],Code,[Type],CreditAccountId)  \n"
                           + "		SELECT DISTINCT ca.nYear nYear,cc.Id, cc.[Description], cc.Code, cc.[Type], cc.CreditAccountId  \n"
                           + "		FROM CreditCodes cc  \n"
                           + "		INNER JOIN (  \n"
                           + "			SELECT ca.Id, YEAR(eod.FODay) nYear  \n"
                           + "			FROM CreditAccounts ca   \n"
                           + "			INNER JOIN EndOfDay eod ON eod.Id = ca.EndOfDayId AND YEAR(eod.FODay) <= @Year  \n"
                           + "		) ca ON ca.Id = cc.CreditAccountId  \n"
                           + "		 \n"
                           + "		/*Insert values to Historic CreditTransactions*/  \n"
                           + "		INSERT INTO CreditTransactions_Hist(nYear,Id,CreditAccountId,CreditCodeId,Amount,CreationTS,[Type],  \n"
                           + "			StaffId,[Description],PosInfoId,EndOfDayId,InvoiceId,TransactionId)  \n"
                           + "		SELECT DISTINCT YEAR(eod.FODay) nYear,ct.Id,ct.CreditAccountId,ct.CreditCodeId,ct.Amount,ct.CreationTS,ct.[Type],  \n"
                           + "			ct.StaffId,ct.[Description],ct.PosInfoId,ct.EndOfDayId,ct.InvoiceId,ct.TransactionId  \n"
                           + "		FROM CreditTransactions ct   \n"
                           + "		INNER JOIN EndOfDay eod ON eod.Id = ct.EndOfDayId AND YEAR(eod.FODay) <= @Year  \n"
                           + " 		  \n"
                           + " 		/*Insert values to Historic EndOfDayDetail*/  \n"
                           + "		INSERT INTO EndOfDayDetail_Hist(nYear,Id,EndOfdayId,VatId,VatRate,VatAmount,TaxId,TaxAmount,Gross,Net,Discount)  \n"
                           + "		SELECT DISTINCT YEAR(eod.FODay) nYear,eodd.Id, eodd.EndOfdayId, eodd.VatId, eodd.VatRate, eodd.VatAmount,  \n"
                           + "			   eodd.TaxId, eodd.TaxAmount, eodd.Gross, eodd.Net, eodd.Discount  \n"
                           + "		FROM EndOfDayDetail eodd  \n"
                           + "		INNER JOIN EndOfDay eod ON eod.Id = eodd.EndOfdayId AND YEAR(eod.FODay) <= @Year  \n"
                           + " 		  \n"
                           + " 		/*Insert values to Historic EndOfDayPaymentAnalysis*/  \n"
                           + "		INSERT INTO EndOfDayPaymentAnalysis_Hist(nYear,Id,EndOfDayId,AccountId,Total,[Description],AccountType)  \n"
                           + "		SELECT DISTINCT YEAR(eod.FODay) nYear,eodpa.Id, eodpa.EndOfDayId, eodpa.AccountId, eodpa.Total, eodpa.[Description], eodpa.AccountType  \n"
                           + "		FROM EndOfDayPaymentAnalysis eodpa  \n"
                           + "		INNER JOIN EndOfDay eod ON eod.Id = eodpa.EndOfDayId AND YEAR(eod.FODay) <= @Year  \n"
                           + " 		  \n"
                           + " 		/*Insert values to Historic EndOfDayVoidsAnalysis*/  \n"
                           + "		INSERT INTO EndOfDayVoidsAnalysis_Hist(nYear,Id,EndOfDayId,AccountId,Total,[Description],AccountType)  \n"
                           + "		SELECT DISTINCT YEAR(eod.FODay) nYear,eodva.Id, eodva.EndOfDayId, eodva.AccountId, eodva.Total, eodva.[Description], eodva.AccountType  \n"
                           + "		FROM EndOfDayVoidsAnalysis eodva  \n"
                           + "		INNER JOIN EndOfDay eod ON eod.Id = eodva.EndOfDayId AND YEAR(eod.FODay) <= @Year  \n"
                           + " 		 \n"
                           + " 		/*Insert values to Historic EndOfDay*/   \n"
                           + "		INSERT INTO EndOfDay_Hist(nYear,Id,FODay,PosInfoId,CloseId,Gross,Net,TicketsCount,ItemCount,TicketAverage,  \n"
                           + "			StaffId,Discount,Barcodes,dtDateTime)  \n"
                           + "		SELECT DISTINCT YEAR(eod.FODay) nYear, eod.Id, eod.FODay, eod.PosInfoId, eod.CloseId, eod.Gross, eod.Net,  \n"
                           + "			   eod.TicketsCount, eod.ItemCount, eod.TicketAverage, eod.StaffId,  \n"
                           + "			   eod.Discount, eod.Barcodes, eod.dtDateTime   \n"
                           + "		FROM EndOfDay eod  \n"
                           + "		WHERE YEAR(eod.FODay) = @Year  \n"
                           + " 		  \n"
                           + " 		/*Insert values to Historic EODAccountToPmsTransfer*/  \n"
                           + "		INSERT INTO EODAccountToPmsTransfer_Hist(nYear,Id,PosInfoId,AccountId,PmsRoom,[Description],[Status],  \n"
                           + "			PmsDepartmentId,PmsDepDescription)  \n"
                           + "		SELECT @Year nYear, etpt.Id, etpt.PosInfoId, etpt.AccountId, etpt.PmsRoom,etpt.[Description], etpt.[Status],   \n"
                           + "			etpt.PmsDepartmentId, etpt.PmsDepDescription  \n"
                           + "		FROM EODAccountToPmsTransfer etpt  \n"
                           + " 		 \n"
                           + " 		/*Insert values to Historic ExternalLostOrders*/   \n"
                           + "		INSERT INTO ExternalLostOrders_Hist(nYear,OrderNo,ExtType)  \n"
                           + "		SELECT YEAR(hpo.CreationDate) nYear, elo.OrderNo, elo.ExtType	  \n"
                           + "		FROM ExternalLostOrders elo  \n"
                           + "		INNER JOIN HitPosOrders hpo ON CAST(hpo.orderno AS VARCHAR(255)) = elo.OrderNo AND YEAR(hpo.CreationDate) <= @Year  \n"
                           + " 		 \n"
                           + " 		/*Insert values to Historic HitPosOrders*/   \n"
                           + "		INSERT INTO HitPosOrders_Hist(nYear,CurId,id,orderno,pos,shop_id,item_group,item_code,item_descr,item_subgroup,item_vat,cont_line,  \n"
                           + "			sp,prep_time,start_time,load_time,otd,qty,amount,total,waiter,ttable,listino,receipt,member,priority,kdws,ready,rqty,nieko_flag,  \n"
                           + "			[status],status_time,rest_time,room,payment,[type],comments,mqty,rec_time_start,status_time2,status_time3,status_time4,  \n"
                           + "			status_time5,fo_day,delivery_time,agent,flag_up,[sent],correct,completed,CreationDate)  \n"
                           + "		SELECT YEAR(hpo.CreationDate) nYear,CurId,id,orderno,pos,shop_id,item_group,item_code,item_descr,item_subgroup,item_vat,cont_line,  \n"
                           + "			sp,prep_time,start_time,load_time,otd,qty,amount,total,waiter,ttable,listino,receipt,member,priority,kdws,ready,rqty,nieko_flag,  \n"
                           + "			[status],status_time,rest_time,room,payment,[type],comments,mqty,rec_time_start,status_time2,status_time3,status_time4,  \n"
                           + "			status_time5,fo_day,delivery_time,agent,flag_up,[sent],correct,completed,CreationDate  \n"
                           + "		FROM HitPosOrders hpo  \n"
                           + "		WHERE YEAR(hpo.CreationDate) <= @Year  \n"
                           + " 		 \n"
                           + " 		/*Insert values to Historic InvoiceShippingDetails*/   \n"
                           + "		INSERT INTO InvoiceShippingDetails_Hist(nYear,Id,InvoicesId,ShippingAddressId,ShippingAddress,ShippingCity,ShippingZipCode,  \n"
                           + "			BillingAddressId,BillingAddress,BillingCity,BillingZipCode,[Floor],CustomerRemarks,StoreRemarks,CustomerName,  \n"
                           + "			Longtitude,Latitude,Phone)  \n"
                           + "		SELECT DISTINCT YEAR(i.[Day]) nYear,isd.Id,InvoicesId,ShippingAddressId,ShippingAddress,ShippingCity,ShippingZipCode,  \n"
                           + "			BillingAddressId,BillingAddress,BillingCity,BillingZipCode,[Floor],CustomerRemarks,StoreRemarks,CustomerName,  \n"
                           + "			Longtitude,Latitude,Phone  \n"
                           + "		FROM InvoiceShippingDetails isd  \n"
                           + "		INNER JOIN Invoices i ON i.Id = isd.InvoicesId AND YEAR(i.[Day]) <= @Year  \n"
                           + " 		 \n"
                           + " 		/*Insert values to Historic Invoices*/  \n"
                           + "		INSERT INTO Invoices_Hist(nYear,Id,[Description],InvoiceTypeId,[Counter],[Day],IsPrinted,GuestId,Total,Discount,Vat,Tax,Net,StaffId,  \n"
                           + "			Cover,TableId,PosInfoId,PdaModuleId,ClientPosId,EndOfDayId,PosInfoDetailId,IsVoided,IsDeleted,DiscountRemark,PaymentsDesc,  \n"
                           + "			IsPaid,	PaidTotal,Rooms,OrderNo,IsInvoiced,Hashcode,TableSum,CashAmount,BuzzerNumber)  \n"
                           + "		SELECT YEAR(i.[Day]) nYear,Id,[Description],InvoiceTypeId,[Counter],[Day],IsPrinted,GuestId,Total,Discount,Vat,Tax,Net,StaffId,  \n"
                           + "			Cover,TableId,PosInfoId,PdaModuleId,ClientPosId,EndOfDayId,PosInfoDetailId,IsVoided,IsDeleted,DiscountRemark,PaymentsDesc,  \n"
                           + "			IsPaid,	PaidTotal,Rooms,OrderNo,IsInvoiced,Hashcode,TableSum,CashAmount,BuzzerNumber  \n"
                           + "		FROM Invoices i  \n"
                           + "		WHERE YEAR(i.[Day]) <= @Year  \n"
                           + " 		 \n"
                           + " 		/*Insert values to Historic Invoice*/  \n"
                           + "		INSERT INTO Invoice_Guests_Trans_Hist(nYear,Id,InvoiceId,GuestId,TransactionId)  \n"
                           + "		SELECT DISTINCT YEAR(i.[Day]) nYear,igt.Id, igt.InvoiceId, igt.GuestId, igt.TransactionId   \n"
                           + "		FROM Invoice_Guests_Trans igt  \n"
                           + "		INNER JOIN Invoices i ON i.Id = igt.InvoiceId AND YEAR(i.[Day]) <= @Year  \n"
                           + "		  \n"
                           + "		/*Insert values to Historic KitchenInstructionLogger*/  \n"
                           + "		INSERT INTO KitchenInstructionLogger_Hist(nYear,Id,KicthcenInstuctionId,StaffId,PdaModulId,ClientId,PosInfoId,SendTS,  \n"
                           + "			ReceivedTS,EndOfDayId,[Status],TableId,ExtecrName,[Description])  \n"
                           + "		SELECT DISTINCT YEAR(eod.FODay) nYear, kil.Id, kil.KicthcenInstuctionId, kil.StaffId, kil.PdaModulId,kil.ClientId, kil.PosInfoId, kil.SendTS,   \n"
                           + "			kil.ReceivedTS, kil.EndOfDayId,kil.[Status], kil.TableId, kil.ExtecrName, kil.[Description]  \n"
                           + "		FROM KitchenInstructionLogger kil  \n"
                           + "		INNER JOIN EndOfDay eod ON eod.Id = kil.EndOfDayId AND YEAR(eod.FODay) <= @Year  \n"
                           + "		  \n"
                           + "		/*Insert values to Historic KitchenInstruction (This Table not Deleted)*/  \n"
                           + "		INSERT INTO KitchenInstruction_Hist(nYear,Id,KitchenId,[Message],[Description])  \n"
                           + "		SELECT @Year nYear, ki.Id, ki.KitchenId, ki.[Message], ki.[Description]  \n"
                           + "		FROM KitchenInstruction ki  \n"
                           + "		WHERE CAST(@Year AS VARCHAR(10))+'-'+CAST(ki.Id AS VARCHAR(10)) NOT IN (SELECT CAST(ki2.nYear AS VARCHAR(10))+'-'+CAST(ki2.Id AS VARCHAR(10)) FROM KitchenInstruction_Hist ki2)  \n"
                           + "		 \n"
                           + "		/*Insert values to Historic Lockers*/   \n"
                           + " 		INSERT INTO Lockers_Hist(nYear,Id,HasLockers,TotalLockers,TotalLockersAmount,Paidlockers,PaidlockersAmount,OccLockers,  \n"
                           + " 			OccLockersAmount,EndOfDayId)  \n"
                           + " 		SELECT YEAR(eod.FODay) nYear, l.Id,l.HasLockers,l.TotalLockers,l.TotalLockersAmount,l.Paidlockers,l.PaidlockersAmount,l.OccLockers,  \n"
                           + " 			l.OccLockersAmount,l.EndOfDayId  \n"
                           + " 		FROM Lockers l  \n"
                           + " 		INNER JOIN EndOfDay eod ON eod.Id = l.EndOfDayId AND YEAR(eod.FODay) <= @Year  \n"
                           + " 		  \n"
                           + " 		/*Insert values to Historic Loyalty*/  \n"
                           + " 		INSERT INTO Loyalty_Hist(nYear, [Day],LoyalltyId,CouponCode,GiftcardCode,CouponType,Campaign,Channel,InvoicesId,Id,  \n"
                           + " 			ErrorDescription,GiftCardCouponType,GiftCardCampaign)  \n"
                           + " 		SELECT YEAR(i.[Day])nYear, l.[Day], l.LoyalltyId, l.CouponCode, l.GiftcardCode,l.CouponType, l.Campaign, l.Channel, l.InvoicesId, l.Id,  \n"
                           + " 		       l.ErrorDescription, l.GiftCardCouponType, l.GiftCardCampaign  \n"
                           + " 		FROM Loyalty l  \n"
                           + " 		INNER JOIN Invoices i ON i.Id = l.InvoicesId AND YEAR(i.[Day]) <= @Year  \n"
                           + " 		 \n"
                           + " 		/*Insert values to Historic MealConsumption*/   \n"
                           + " 		INSERT INTO MealConsumption_Hist(nYear, Id, GuestId, ConsumedMeals,ConsumedTS, IsDeleted, BoardCode, ReservationId,  \n"
                           + " 		            ConsumedMealsChild, DepartmentId, EndOfDayId, PosInfoId)  \n"
                           + " 		SELECT YEAR(eod.FODay) nYear, mc.Id, mc.GuestId, mc.ConsumedMeals, mc.ConsumedTS, mc.IsDeleted, mc.BoardCode, mc.ReservationId,  \n"
                           + " 		       mc.ConsumedMealsChild, mc.DepartmentId, mc.EndOfDayId,  \n"
                           + " 		       mc.PosInfoId  \n"
                           + " 		FROM MealConsumption mc  \n"
                           + " 		INNER JOIN EndOfDay eod ON eod.Id = mc.EndOfDayId AND YEAR(eod.FODay) <= @Year  \n"
                           + " 		  \n"
                           + " 		/*Insert values to Historic OnlineRegistration*/  \n"
                           + "		INSERT INTO OnlineRegistration_Hist(nYear,BarCode,FirtName,LastName,Mobile,Dates,Children,Adults,PaymentType,ChildTicket,  \n"
                           + "			AdultTicket,RegistrationDate,TotalChildren,TotalAdults,ChildrenEntered,AdultsEntered,TotalAmount,RemainingAmount,[Status])  \n"
                           + "		SELECT @Year nYear,BarCode,FirtName,LastName,Mobile,Dates,Children,Adults,PaymentType,ChildTicket,  \n"
                           + "			AdultTicket,RegistrationDate,TotalChildren,TotalAdults,ChildrenEntered,AdultsEntered,TotalAmount,RemainingAmount,[Status]  \n"
                           + "		FROM OnlineRegistration or1  \n"
                           + "		 \n"
                           + "		/*Insert values to Historic Order*/   \n"
                           + "		INSERT INTO Order_Hist(nYear,Id,OrderNo,[Day],Total,PosId,StaffId,EndOfDayId,Discount,ReceiptNo,TotalBeforeDiscount,  \n"
                           + "			PdaModuleId,ClientPosId,IsDeleted,ExtType,ExtObj,ExtKey,OrderOrigin,Couver)  \n"
                           + "		SELECT YEAR(o.[Day]) nYear, o.Id, o.OrderNo, o.[Day], o.Total, o.PosId, o.StaffId, o.EndOfDayId,o.Discount, o.ReceiptNo, o.TotalBeforeDiscount,   \n"
                           + "			o.PdaModuleId, o.ClientPosId, o.IsDeleted, o.ExtType, o.ExtObj, o.ExtKey,o.OrderOrigin, o.Couver   \n"
                           + "		FROM [Order] o  \n"
                           + "		WHERE YEAR(o.[Day]) <= @Year  \n"
                           + "		  \n"
                           + "		/*Insert values to Historic OrderStatus*/  \n"
                           + "		INSERT INTO OrderStatus_Hist(nYear,Id,[Status],TimeChanged,OrderId,StaffId,ExtState)  \n"
                           + "		SELECT YEAR(o.[Day]) nYear, os.Id, os.[Status], os.TimeChanged, os.OrderId, os.StaffId, os.ExtState  \n"
                           + "		FROM OrderStatus os  \n"
                           + "		INNER JOIN [Order] o ON o.Id = os.OrderId AND YEAR(o.[Day]) <= @Year  \n"
                           + "		 \n"
                           + "		/*Insert values to Historic OrdersStaff*/   \n"
                           + "		INSERT INTO OrdersStaff_Hist(nYear,Id,StaffId,OrderId,[Type])  \n"
                           + "		SELECT YEAR(o.[Day]) nYear,os.Id, os.StaffId, os.OrderId, os.[Type]   \n"
                           + "		FROM OrdersStaff os   \n"
                           + "		INNER JOIN [Order] o ON o.Id = os.OrderId AND YEAR(o.[Day]) <= @Year  \n"
                           + " 		  \n"
                           + " 		/*Insert values to Historic OrderDetail*/  \n"
                           + "		INSERT INTO OrderDetail_Hist(nYear,Id,OrderId,ProductId,KitchenId,KdsId,PreparationTime,TableId,[Status],StatusTS,Price,PriceListDetailId,  \n"
                           + "			Qty,SalesTypeId,Discount,PaidStatus,TransactionId,TotalAfterDiscount,GuestId,Couver,Guid,IsDeleted,	PendingQty)  \n"
                           + "		SELECT YEAR(o.[Day]) nYear, od.Id, od.OrderId, od.ProductId, od.KitchenId, od.KdsId, od.PreparationTime, od.TableId, od.[Status], od.StatusTS,   \n"
                           + "			od.Price,od.PriceListDetailId, od.Qty, od.SalesTypeId, od.Discount, od.PaidStatus, od.TransactionId, od.TotalAfterDiscount, od.GuestId,   \n"
                           + "			od.Couver,od.Guid, od.IsDeleted, od.PendingQty   \n"
                           + "		FROM OrderDetail od  \n"
                           + "		INNER JOIN [Order] o ON o.Id = od.OrderId AND YEAR(o.[Day]) <= @Year  \n"
                           + " 		  \n"
                           + " 		/*Insert values to Historic OrderDetailVatAnal*/  \n"
                           + "		INSERT INTO OrderDetailVatAnal_Hist(nYear,Id,OrderDetailId,Gross,Net,VatRate,VatAmount,VatId,TaxId,TaxAmount,IsDeleted)  \n"
                           + "		SELECT od.nYear, odva.Id, odva.OrderDetailId, odva.Gross, odva.Net, odva.VatRate, odva.VatAmount, odva.VatId, odva.TaxId, odva.TaxAmount,   \n"
                           + "			odva.IsDeleted      \n"
                           + "		FROM OrderDetailVatAnal odva  \n"
                           + "		INNER JOIN (  \n"
                           + "			SELECT DISTINCT od.Id, YEAR(o.[Day]) nYear  \n"
                           + "			FROM OrderDetail od  \n"
                           + "			INNER JOIN [Order] o ON o.Id = od.OrderId AND YEAR(o.[Day]) <= @Year  \n"
                           + "		) od ON od.Id = odva.OrderDetailId  \n"
                           + " 		 \n"
                           + " 		/*Insert values to Historic OrderDetailIgredients*/   \n"
                           + "		INSERT INTO OrderDetailIgredients_Hist(	nYear,Id,IngredientId,Qty,UnitId,Price,OrderDetailId,PriceListDetailId,Discount,TotalAfterDiscount,  \n"
                           + "			IsDeleted)  \n"
                           + "		SELECT od.nYear, odi.Id, odi.IngredientId, odi.Qty, odi.UnitId, odi.Price, odi.OrderDetailId, odi.PriceListDetailId, odi.Discount,  \n"
                           + "			   odi.TotalAfterDiscount, odi.IsDeleted  \n"
                           + "		FROM OrderDetailIgredients odi  \n"
                           + "		INNER JOIN (  \n"
                           + "			SELECT DISTINCT od.Id, YEAR(o.[Day]) nYear  \n"
                           + "			FROM OrderDetail od  \n"
                           + "			INNER JOIN [Order] o ON o.Id = od.OrderId AND YEAR(o.[Day]) <= @Year	  \n"
                           + "		) od ON od.Id = odi.OrderDetailId  \n"
                           + " 		  \n"
                           + " 		/*Insert values to Historic OrderDetailIgredientVatAnal*/  \n"
                           + "		INSERT INTO OrderDetailIgredientVatAnal_Hist (nYear,Id,OrderDetailIgredientsId,Gross,Net,VatRate,VatAmount,VatId,TaxId,TaxAmount,IsDeleted)  \n"
                           + "		SELECT odi.nYear, odiva.Id, odiva.OrderDetailIgredientsId, odiva.Gross, odiva.Net, odiva.VatRate, odiva.VatAmount, odiva.VatId, odiva.TaxId,  \n"
                           + "			odiva.TaxAmount, odiva.IsDeleted  \n"
                           + "		FROM OrderDetailIgredientVatAnal odiva  \n"
                           + "		INNER JOIN (  \n"
                           + "			SELECT DISTINCT odi.Id, od.nYear  \n"
                           + "			FROM OrderDetailIgredients odi  \n"
                           + "			INNER JOIN (  \n"
                           + "				SELECT DISTINCT od.Id, YEAR(o.[Day]) nYear  \n"
                           + "				FROM OrderDetail od  \n"
                           + "				INNER JOIN [Order] o ON o.Id = od.OrderId AND YEAR(o.[Day]) <= @Year	  \n"
                           + "			) od ON od.Id = odi.OrderDetailId	  \n"
                           + "		) odi ON odi.Id = odiva.OrderDetailIgredientsId  \n"
                           + "		  \n"
                           + "		/*Insert values to Historic OrderDetailInvoices*/  \n"
                           + "		INSERT INTO OrderDetailInvoices_Hist(nYear,Id,OrderDetailId,StaffId,PosInfoDetailId,[Counter],CreationTS,IsPrinted,CustomerId,InvoicesId,  \n"
                           + "			IsDeleted,OrderDetailIgredientsId,Price,Discount,Net,VatRate,VatAmount,VatId,TaxId,VatCode,TaxAmount,Qty,Total,PricelistId,ProductId,  \n"
                           + "			[Description],ItemCode,ItemRemark,InvoiceType,TableId,TableCode,RegionId,OrderNo,OrderId,IsExtra,PosInfoId,EndOfDayId,Abbreviation,  \n"
                           + "			DiscountId,SalesTypeId,ProductCategoryId,CategoryId,ItemPosition,ItemSort,ItemRegion,RegionPosition,ItemBarcode,TotalBeforeDiscount,  \n"
                           + "			TotalAfterDiscount,ReceiptSplitedDiscount)  \n"
                           + "		SELECT YEAR(i.[Day]) nYear, odi.Id, odi.OrderDetailId, odi.StaffId, odi.PosInfoDetailId,odi.[Counter], odi.CreationTS, odi.IsPrinted, odi.CustomerId,  \n"
                           + "			   odi.InvoicesId, odi.IsDeleted, odi.OrderDetailIgredientsId, odi.Price,odi.Discount, odi.Net, odi.VatRate, odi.VatAmount, odi.VatId,   \n"
                           + "			   odi.TaxId,odi.VatCode, odi.TaxAmount, odi.Qty, odi.Total, odi.PricelistId,odi.ProductId, odi.[Description], odi.ItemCode, odi.ItemRemark,  \n"
                           + "			   odi.InvoiceType, odi.TableId, odi.TableCode, odi.RegionId, odi.OrderNo,odi.OrderId, odi.IsExtra, odi.PosInfoId, odi.EndOfDayId,  \n"
                           + "			   odi.Abbreviation, odi.DiscountId, odi.SalesTypeId,odi.ProductCategoryId, odi.CategoryId, odi.ItemPosition, odi.ItemSort,  \n"
                           + "			   odi.ItemRegion, odi.RegionPosition, odi.ItemBarcode,odi.TotalBeforeDiscount, odi.TotalAfterDiscount,odi.ReceiptSplitedDiscount  \n"
                           + "		FROM OrderDetailInvoices odi  \n"
                           + "		INNER JOIN Invoices i ON i.Id = odi.InvoicesId AND YEAR(i.[Day]) <= @Year  \n"
                           + "		 \n"
                           + "		/*Insert values to Historic StoreMessages*/   \n"
                           + "		INSERT INTO StoreMessages_Hist(nYear,Id,[Message],CreationDate,Title,StoreId,ShowFrom,ShowTo,ImageUri,[Status])  \n"
                           + "		SELECT YEAR(sm.ShowTo) nYear, sm.Id, sm.[Message], sm.CreationDate, sm.Title, sm.StoreId, sm.ShowFrom,  \n"
                           + "			   sm.ShowTo, sm.ImageUri, sm.[Status]  \n"
                           + "		FROM StoreMessages sm  \n"
                           + "		WHERE YEAR(sm.ShowTo) <= @Year  \n"
                           + "		 \n"
                           + "		/*Insert values to Historic TablePaySuggestion*/   \n"
                           + " 		INSERT INTO TablePaySuggestion_Hist(nYear,Id,AccountId,GuestId,	Amount,	OrderDetailId,IsUsed,CreditCodeId)  \n"
                           + " 		SELECT YEAR(o.[Day]) nYear, tps.Id, tps.AccountId, tps.GuestId, tps.Amount, tps.OrderDetailId, tps.IsUsed, tps.CreditCodeId  \n"
                           + " 		FROM TablePaySuggestion tps  \n"
                           + " 		INNER JOIN OrderDetail od ON od.Id = tps.OrderDetailId  \n"
                           + " 		INNER JOIN [Order] o ON o.Id = od.OrderId AND YEAR(o.[Day]) <= @Year  \n"
                           + "		  \n"
                           + "		/*Insert values to Historic Transactions*/  \n"
                           + "		INSERT INTO Transactions_Hist(nYear,Id,[Day],PosInfoId,StaffId,OrderId,TransactionType,Amount,DepartmentId,[Description],  \n"
                           + "			AccountId,InOut,Gross,Net,Vat,Tax,EndOfDayId,ExtDescription,InvoicesId,IsDeleted)  \n"
                           + "		SELECT YEAR(eod.FODay) nYear, t.Id, t.[Day], t.PosInfoId, t.StaffId, t.OrderId, t.TransactionType,t.Amount, t.DepartmentId, t.[Description],   \n"
                           + "			t.AccountId, t.InOut, t.Gross, t.Net, t.Vat, t.Tax, t.EndOfDayId, t.ExtDescription,t.InvoicesId, t.IsDeleted  \n"
                           + "		FROM Transactions t  \n"
                           + "		INNER JOIN EndOfDay eod ON eod.Id = t.EndOfDayId AND YEAR(eod.FODay) <= @Year  \n"
                           + "		 \n"
                           + "		/*Insert values to Historic TransferMappingDetails (This Table not Deleted)*/   \n"
                           + "		INSERT INTO TransferMappingDetails_Hist(nYear,Id,TransferMappingsId,ProductCategoryId,ProductId)  \n"
                           + "		SELECT DISTINCT @Year nYear, tmd.Id, tmd.TransferMappingsId, tmd.ProductCategoryId, tmd.ProductId  \n"
                           + "		FROM TransferMappingDetails tmd  \n"
                           + "		INNER JOIN TransferMappings tm ON tm.Id = tmd.TransferMappingsId AND CAST(@Year AS VARCHAR(10))+'-'+CAST(tm.Id AS VARCHAR(10)) NOT IN (SELECT CAST(trm.nYear AS VARCHAR(10))+'-'+CAST(trm.Id AS VARCHAR(10)) FROM TransferMappings_Hist trm)  \n"
                           + "		 \n"
                           + "		/*Insert values to Historic TransferMappings (This Table not Deleted)*/   \n"
                           + "		INSERT INTO TransferMappings_Hist(nYear,Id,PmsDepartmentId,	PmsDepDescription,ProductId,SalesTypeId,VatPercentage,PosDepartmentId,  \n"
                           + "			PriceListId,VatCode,ProductCategoryId,HotelId)  \n"
                           + "		SELECT @Year nYear,Id,PmsDepartmentId,	PmsDepDescription,ProductId,SalesTypeId,VatPercentage,PosDepartmentId,  \n"
                           + "			PriceListId,VatCode,ProductCategoryId,HotelId  \n"
                           + "		FROM TransferMappings tm  \n"
                           + "		WHERE CAST(@Year AS VARCHAR(10))+'-'+CAST(tm.Id AS VARCHAR(10)) NOT IN (SELECT CAST(trm.nYear AS VARCHAR(10))+'-'+CAST(trm.Id AS VARCHAR(10)) FROM TransferMappings_Hist trm)  \n"
                           + "		 \n"
                           + "		/*Insert values to Historic TransferToPms*/   \n"
                           + "		INSERT INTO TransferToPms_Hist(nYear,Id,RegNo,PmsDepartmentId,[Description],ProfileId,ProfileName,TransactionId,TransferType,  \n"
                           + "			RoomId,RoomDescription,ReceiptNo,PosInfoDetailId,SendToPMS,Total,SendToPmsTS,ErrorMessage,PmsResponseId,TransferIdentifier,  \n"
                           + "			PmsDepartmentDescription,[Status],PosInfoId,EndOfDayId,HotelId,IsDeleted)  \n"
                           + "		SELECT YEAR(ttp.SendToPMS) nYear,Id,RegNo,PmsDepartmentId,[Description],ProfileId,ProfileName,TransactionId,TransferType,  \n"
                           + "			RoomId,RoomDescription,ReceiptNo,PosInfoDetailId,SendToPMS,Total,SendToPmsTS,ErrorMessage,PmsResponseId,TransferIdentifier,  \n"
                           + "			PmsDepartmentDescription,[Status],PosInfoId,EndOfDayId,HotelId,IsDeleted  \n"
                           + "		FROM TransferToPms ttp  \n"
                           + "		WHERE YEAR(ttp.SendToPMS) <= @Year  \n"
                           + "		  \n"
                           + "		/*Delete Data from tables. Important is the order of deletion.  */  \n"
                           + "		 \n"
                           + "		/*Delete values From CreditTransactions*/  \n"
                           + "		DELETE FROM CreditTransactions  \n"
                           + "		WHERE Id IN (SELECT cch.Id FROM CreditTransactions_Hist cch)  \n"
                           + " \n"
                           + "		/*Delete values From TablePaySuggestion*/  \n"
                           + "		DELETE FROM TablePaySuggestion  \n"
                           + "		WHERE Id IN (SELECT cch.Id FROM TablePaySuggestion_Hist cch)  \n"
                           + "	  \n"
                           + "		/*Delete values From CreditCodes*/  \n"
                           + "		DELETE FROM CreditCodes  \n"
                           + "		WHERE Id IN (SELECT cch.Id FROM CreditCodes_Hist cch) AND   \n"
                           + "			Id NOT IN (  \n"
                           + "				SELECT ct.CreditCodeId  \n"
                           + "				FROM CreditTransactions ct  \n"
                           + "				WHERE ct.CreditCodeId IS NOT NULL  \n"
                           + "				UNION ALL  \n"
                           + "				SELECT tps.CreditCodeId  \n"
                           + "				FROM TablePaySuggestion tps  \n"
                           + "				WHERE tps.CreditCodeId IS NOT NULL  \n"
                           + "			)  \n"
                           + " \n"
                           + "		/*Delete values From CreditAccounts*/  \n"
                           + "		DELETE FROM CreditAccounts  \n"
                           + "		WHERE Id IN (SELECT cch.Id FROM CreditAccounts_Hist cch) AND   \n"
                           + "			Id NOT IN (  \n"
                           + "				SELECT ct.CreditAccountId  \n"
                           + "				FROM CreditTransactions ct  \n"
                           + "				WHERE ct.CreditAccountId IS NOT NULL  \n"
                           + "				UNION ALL  \n"
                           + "				SELECT cc.CreditAccountId  \n"
                           + "				FROM CreditCodes cc  \n"
                           + "				WHERE cc.CreditAccountId IS NOT NULL  \n"
                           + "			)  \n"
                           + "	  \n"
                           + "		/*Delete values From EndOfDayDetail*/  \n"
                           + "		DELETE FROM EndOfDayDetail  \n"
                           + "		WHERE Id IN (SELECT cch.Id FROM EndOfDayDetail_Hist cch)   \n"
                           + "		 \n"
                           + "		/*Delete values From EndOfDayPaymentAnalysis*/  \n"
                           + "		DELETE FROM EndOfDayPaymentAnalysis  \n"
                           + "		WHERE Id IN (SELECT cch.Id FROM EndOfDayPaymentAnalysis_Hist cch)   \n"
                           + " \n"
                           + "		/*Delete values From EndOfDayVoidsAnalysis*/  \n"
                           + "		DELETE FROM EndOfDayVoidsAnalysis  \n"
                           + "		WHERE Id IN (SELECT cch.Id FROM EndOfDayVoidsAnalysis_Hist cch)   \n"
                           + "	  \n"
                           + "		/*Delete values From EODAccountToPmsTransfer*/  \n"
                           + "		DELETE FROM EODAccountToPmsTransfer  \n"
                           + "		WHERE Id IN (SELECT cch.Id FROM EODAccountToPmsTransfer_Hist cch)   \n"
                           + "	  \n"
                           + "		/*Delete values From ExternalLostOrders*/  \n"
                           + "		DELETE FROM ExternalLostOrders  \n"
                           + "		WHERE OrderNo+'-'+CAST(ExtType AS VARCHAR(50)) IN (SELECT cch.OrderNo+'-'+CAST(cch.ExtType AS VARCHAR(50)) FROM ExternalLostOrders_Hist cch)   \n"
                           + "	  \n"
                           + "		/*Delete values From HitPosOrders*/  \n"
                           + "		DELETE FROM HitPosOrders  \n"
                           + "		WHERE Id IN (SELECT cch.Id FROM HitPosOrders_Hist cch)   \n"
                           + "	  \n"
                           + "		/*Delete values From Invoice_Guests_Trans*/  \n"
                           + "		DELETE FROM Invoice_Guests_Trans  \n"
                           + "		WHERE Id IN (SELECT cch.Id FROM Invoice_Guests_Trans_Hist cch)   \n"
                           + "	  \n"
                           + "		/*Delete values From InvoiceShippingDetails*/  \n"
                           + "		DELETE FROM InvoiceShippingDetails  \n"
                           + "		WHERE Id IN (SELECT cch.Id FROM InvoiceShippingDetails_Hist cch)   \n"
                           + "	  \n"
                           + "		/*Delete values From KitchenInstructionLogger*/  \n"
                           + "		DELETE FROM KitchenInstructionLogger  \n"
                           + "		WHERE Id IN (SELECT cch.Id FROM KitchenInstructionLogger_Hist cch)   \n"
                           + "	  \n"
                           + "		/*Delete values From Lockers*/  \n"
                           + "		DELETE FROM Lockers  \n"
                           + "		WHERE Id IN (SELECT cch.Id FROM Lockers_Hist cch)   \n"
                           + "	  \n"
                           + "		/*Delete values From Loyalty*/  \n"
                           + "		DELETE FROM Loyalty  \n"
                           + "		WHERE Id IN (SELECT cch.Id FROM Loyalty_Hist cch)   \n"
                           + " \n"
                           + "		/*Delete values From MealConsumption*/  \n"
                           + "		DELETE FROM MealConsumption  \n"
                           + "		WHERE Id IN (SELECT cch.Id FROM MealConsumption_Hist cch)   \n"
                           + "	  \n"
                           + "		/*Delete values From OnlineRegistration*/  \n"
                           + "		DELETE FROM OnlineRegistration  \n"
                           + "		WHERE BarCode IN (SELECT cch.BarCode FROM OnlineRegistration_Hist cch)   \n"
                           + " \n"
                           + "		/*Delete values From OrderDetailInvoices*/  \n"
                           + "		DELETE FROM OrderDetailInvoices  \n"
                           + "		WHERE Id IN (SELECT cch.Id FROM OrderDetailInvoices_Hist cch)   \n"
                           + "	  \n"
                           + "		/*Delete values From OrderDetailIgredientVatAnal*/  \n"
                           + "		DELETE FROM OrderDetailIgredientVatAnal  \n"
                           + "		WHERE Id IN (SELECT cch.Id FROM OrderDetailIgredientVatAnal_Hist cch)   \n"
                           + "	  \n"
                           + "		/*Delete values From OrderDetailIgredients*/  \n"
                           + "		DELETE FROM OrderDetailIgredients  \n"
                           + "		WHERE Id IN (SELECT cch.Id FROM OrderDetailIgredients_Hist cch) AND   \n"
                           + "			id NOT IN (  \n"
                           + "				SELECT odiva.OrderDetailIgredientsId  \n"
                           + "				FROM OrderDetailIgredientVatAnal odiva  \n"
                           + "				WHERE odiva.OrderDetailIgredientsId IS NOT NULL  \n"
                           + "				UNION ALL  \n"
                           + "				SELECT odi.OrderDetailIgredientsId  \n"
                           + "				FROM OrderDetailInvoices odi  \n"
                           + "				WHERE odi.OrderDetailIgredientsId IS NOT NULL  \n"
                           + "			)  \n"
                           + "	  \n"
                           + "		/*Delete values From OrderDetailVatAnal*/  \n"
                           + "		DELETE FROM OrderDetailVatAnal  \n"
                           + "		WHERE Id IN (SELECT cch.Id FROM OrderDetailVatAnal_Hist cch)   \n"
                           + "	  \n"
                           + "		/*Delete values From OrderDetail*/  \n"
                           + "		DELETE FROM OrderDetail  \n"
                           + "		WHERE Id IN (SELECT cch.Id FROM OrderDetail_Hist cch) AND   \n"
                           + "			id NOT IN (  \n"
                           + "				SELECT tps.OrderDetailId  \n"
                           + "				FROM TablePaySuggestion tps  \n"
                           + "				WHERE tps.OrderDetailId IS NOT NULL  \n"
                           + "				UNION ALL  \n"
                           + "				SELECT odi.OrderDetailId  \n"
                           + "				FROM OrderDetailIgredients odi  \n"
                           + "				WHERE odi.OrderDetailId IS NOT NULL  \n"
                           + "				UNION ALL  \n"
                           + "				SELECT odi.OrderDetailId  \n"
                           + "				FROM OrderDetailInvoices odi  \n"
                           + "				WHERE odi.OrderDetailId IS NOT NULL  \n"
                           + "				UNION ALL  \n"
                           + "				SELECT odva.OrderDetailId  \n"
                           + "				FROM OrderDetailVatAnal odva  \n"
                           + "				WHERE odva.OrderDetailId IS NOT NULL  \n"
                           + "			)  \n"
                           + "	  \n"
                           + "		/*Delete values From OrdersStaff*/  \n"
                           + "		DELETE FROM OrdersStaff  \n"
                           + "		WHERE Id IN (SELECT cch.Id FROM OrdersStaff_Hist cch)   \n"
                           + " \n"
                           + "		/*Delete values From OrderStatus*/  \n"
                           + "		DELETE FROM OrderStatus  \n"
                           + "		WHERE Id IN (SELECT cch.Id FROM OrderStatus_Hist cch)   \n"
                           + " \n"
                           + "		/*Delete values From TransferToPms*/  \n"
                           + "		DELETE FROM TransferToPms  \n"
                           + "		WHERE Id IN (SELECT cch.Id FROM TransferToPms_Hist cch)   \n"
                           + "  \n"
                           + "		/*Delete values From Transactions*/  \n"
                           + "		DELETE FROM Transactions  \n"
                           + "		WHERE Id IN (SELECT cch.Id FROM Transactions_Hist cch) AND   \n"
                           + "			id NOT IN (  \n"
                           + "				SELECT tps.TransactionId  \n"
                           + "				FROM CreditTransactions tps  \n"
                           + "				WHERE tps.TransactionId IS NOT NULL  \n"
                           + "				UNION ALL  \n"
                           + "				SELECT odi.TransactionId  \n"
                           + "				FROM TransferToPms odi  \n"
                           + "				WHERE odi.TransactionId IS NOT NULL  \n"
                           + "				UNION ALL  \n"
                           + "				SELECT odi.TransactionId  \n"
                           + "				FROM Invoice_Guests_Trans odi  \n"
                           + "				WHERE odi.TransactionId IS NOT NULL  \n"
                           + "				UNION ALL  \n"
                           + "				SELECT odva.TransactionId  \n"
                           + "				FROM OrderDetail odva  \n"
                           + "				WHERE odva.TransactionId IS NOT NULL  \n"
                           + "			)  \n"
                           + " \n"
                           + "		/*Delete values From Order*/  \n"
                           + "		DELETE FROM [Order]  \n"
                           + "		WHERE Id IN (SELECT cch.Id FROM Order_Hist cch) AND   \n"
                           + "			id NOT IN (  \n"
                           + "				SELECT t.OrderId  \n"
                           + "				FROM Transactions t  \n"
                           + "				WHERE t.OrderId IS NOT NULL  \n"
                           + "				UNION ALL  \n"
                           + "				SELECT od.OrderId  \n"
                           + "				FROM OrderDetail od  \n"
                           + "				WHERE od.OrderId IS NOT NULL  \n"
                           + "				UNION ALL  \n"
                           + "				SELECT os.OrderId  \n"
                           + "				FROM OrdersStaff os  \n"
                           + "				WHERE os.OrderId IS NOT NULL  \n"
                           + "				UNION ALL  \n"
                           + "				SELECT os.OrderId  \n"
                           + "				FROM OrderStatus os  \n"
                           + "				WHERE os.OrderId IS NOT NULL  \n"
                           + "			)  \n"
                           + "	  \n"
                           + "		/*Delete values From Invoices*/  \n"
                           + "		DELETE FROM Invoices  \n"
                           + "		WHERE Id IN (SELECT cch.Id FROM Invoices_Hist cch) AND   \n"
                           + "			id NOT IN (  \n"
                           + "				SELECT t.InvoicesId  \n"
                           + "				FROM Transactions t  \n"
                           + "				WHERE t.InvoicesId IS NOT NULL  \n"
                           + "				UNION ALL  \n"
                           + "				SELECT ct.InvoiceId  \n"
                           + "				FROM CreditTransactions ct  \n"
                           + "				WHERE ct.InvoiceId IS NOT NULL  \n"
                           + "				UNION ALL  \n"
                           + "				SELECT isd.InvoicesId  \n"
                           + "				FROM InvoiceShippingDetails isd  \n"
                           + "				WHERE isd.InvoicesId IS NOT NULL  \n"
                           + "				UNION ALL  \n"
                           + "				SELECT igt.InvoiceId  \n"
                           + "				FROM Invoice_Guests_Trans igt  \n"
                           + "				WHERE igt.InvoiceId IS NOT NULL  \n"
                           + "				UNION ALL  \n"
                           + "				SELECT l.InvoicesId  \n"
                           + "				FROM Loyalty l  \n"
                           + "				WHERE l.InvoicesId IS NOT NULL  \n"
                           + "				UNION ALL  \n"
                           + "				SELECT odi.InvoicesId  \n"
                           + "				FROM OrderDetailInvoices odi  \n"
                           + "				WHERE odi.InvoicesId IS NOT NULL  \n"
                           + "			)  \n"
                           + " \n"
                           + "		/*Delete values From EndOfDay*/  \n"
                           + "		DELETE FROM EndOfDay  \n"
                           + "		WHERE Id IN (SELECT cch.Id FROM EndOfDay_Hist cch) AND   \n"
                           + "			id NOT IN (  \n"
                           + "				SELECT ca.EndOfDayId  \n"
                           + "				FROM CreditAccounts ca  \n"
                           + "				WHERE ca.EndOfDayId IS NOT NULL  \n"
                           + "				UNION ALL  \n"
                           + "				SELECT ct.EndOfDayId  \n"
                           + "				FROM CreditTransactions ct  \n"
                           + "				WHERE ct.EndOfDayId IS NOT NULL  \n"
                           + "				UNION ALL  \n"
                           + "				SELECT eodd.EndOfdayId  \n"
                           + "				FROM EndOfDayDetail eodd  \n"
                           + "				WHERE eodd.EndOfdayId IS NOT NULL  \n"
                           + "				UNION ALL  \n"
                           + "				SELECT eodpa.EndOfDayId  \n"
                           + "				FROM EndOfDayPaymentAnalysis eodpa  \n"
                           + "				WHERE eodpa.EndOfDayId IS NOT NULL  \n"
                           + "				UNION ALL  \n"
                           + "				SELECT eodva.EndOfDayId  \n"
                           + "				FROM EndOfDayVoidsAnalysis eodva  \n"
                           + "				WHERE eodva.EndOfDayId IS NOT NULL  \n"
                           + "				UNION ALL  \n"
                           + "				SELECT t.EndOfDayId  \n"
                           + "				FROM Transactions t  \n"
                           + "				WHERE t.EndOfDayId IS NOT NULL  \n"
                           + "				UNION ALL  \n"
                           + "				SELECT ttp.EndOfDayId  \n"
                           + "				FROM TransferToPms ttp  \n"
                           + "				WHERE ttp.EndOfDayId IS NOT NULL  \n"
                           + "				UNION ALL  \n"
                           + "				SELECT i.EndOfDayId  \n"
                           + "				FROM Invoices i  \n"
                           + "				WHERE i.EndOfDayId IS NOT NULL  \n"
                           + "				UNION ALL  \n"
                           + "				SELECT kil.EndOfDayId  \n"
                           + "				FROM KitchenInstructionLogger kil  \n"
                           + "				WHERE kil.EndOfDayId IS NOT NULL  \n"
                           + "				UNION ALL  \n"
                           + "				SELECT l.EndOfDayId  \n"
                           + "				FROM Lockers l  \n"
                           + "				WHERE l.EndOfDayId IS NOT NULL  \n"
                           + "				UNION ALL  \n"
                           + "				SELECT mc.EndOfDayId  \n"
                           + "				FROM MealConsumption mc  \n"
                           + "				WHERE mc.EndOfDayId IS NOT NULL  \n"
                           + "				UNION ALL  \n"
                           + "				SELECT o.EndOfDayId  \n"
                           + "				FROM [Order] o  \n"
                           + "				WHERE o.EndOfDayId IS NOT NULL  \n"
                           + "				UNION ALL  \n"
                           + "				SELECT odi.EndOfDayId  \n"
                           + "				FROM OrderDetailInvoices odi  \n"
                           + "				WHERE odi.EndOfDayId IS NOT NULL  \n"
                           + "			)  \n"
                           + "	  \n"
                           + "		/*Delete values From StoreMessages*/  \n"
                           + "		DELETE FROM StoreMessages  \n"
                           + "		WHERE Id IN (SELECT cch.Id FROM StoreMessages_Hist cch)   \n"
                           + " \n"
                           + "		/*Delete values From Historic tables. These records are on Master tables and can not be deleted for this year.*/  \n"
                           + "		DELETE FROM CreditAccounts_Hist WHERE Id IN (SELECT Id FROM CreditAccounts)  \n"
                           + "		DELETE FROM CreditCodes_Hist WHERE Id IN (SELECT Id FROM CreditCodes)  \n"
                           + "		DELETE FROM CreditTransactions_Hist WHERE Id IN (SELECT Id FROM CreditTransactions)  \n"
                           + "		DELETE FROM EndOfDay_Hist WHERE Id IN (SELECT Id FROM EndOfDay)  \n"
                           + "		DELETE FROM EndOfDayDetail_Hist WHERE Id IN (SELECT Id FROM EndOfDayDetail)  \n"
                           + "		DELETE FROM EndOfDayPaymentAnalysis_Hist WHERE Id IN (SELECT Id FROM EndOfDayPaymentAnalysis)  \n"
                           + "		DELETE FROM EndOfDayVoidsAnalysis_Hist WHERE Id IN (SELECT Id FROM EndOfDayVoidsAnalysis)  \n"
                           + "		DELETE FROM EODAccountToPmsTransfer_Hist WHERE Id IN (SELECT Id FROM EODAccountToPmsTransfer)  \n"
                           + "		DELETE FROM ExternalLostOrders_Hist WHERE OrderNo+'-'+CAST(ExtType AS VARCHAR(50)) IN (SELECT OrderNo+'-'+CAST(ExtType AS VARCHAR(50)) FROM ExternalLostOrders)  \n"
                           + "		DELETE FROM HitPosOrders_Hist WHERE Id IN (SELECT Id FROM HitPosOrders)  \n"
                           + "		DELETE FROM Invoice_Guests_Trans_Hist WHERE Id IN (SELECT Id FROM Invoice_Guests_Trans)  \n"
                           + "		DELETE FROM Invoices_Hist WHERE Id IN (SELECT Id FROM Invoices)  \n"
                           + "		DELETE FROM InvoiceShippingDetails_Hist WHERE Id IN (SELECT Id FROM InvoiceShippingDetails)  \n"
                           + "		DELETE FROM KitchenInstructionLogger_Hist WHERE Id IN (SELECT Id FROM KitchenInstructionLogger)  \n"
                           + "		DELETE FROM Lockers_Hist WHERE Id IN (SELECT Id FROM Lockers)  \n"
                           + "		DELETE FROM Loyalty_Hist WHERE Id IN (SELECT Id FROM Loyalty)  \n"
                           + "		DELETE FROM MealConsumption_Hist WHERE Id IN (SELECT Id FROM MealConsumption)  \n"
                           + "		DELETE FROM OnlineRegistration_Hist WHERE BarCode IN (SELECT BarCode FROM OnlineRegistration)  \n"
                           + "		DELETE FROM Order_Hist WHERE Id IN (SELECT Id FROM [Order])  \n"
                           + "		DELETE FROM OrderDetail_Hist WHERE Id IN (SELECT Id FROM OrderDetail)  \n"
                           + "		DELETE FROM OrderDetailIgredients_Hist WHERE Id IN (SELECT Id FROM OrderDetailIgredients)  \n"
                           + "		DELETE FROM OrderDetailIgredientVatAnal_Hist WHERE Id IN (SELECT Id FROM OrderDetailIgredientVatAnal)  \n"
                           + "		DELETE FROM OrderDetailInvoices_Hist WHERE Id IN (SELECT Id FROM OrderDetailInvoices)  \n"
                           + "		DELETE FROM OrderDetailVatAnal_Hist WHERE Id IN (SELECT Id FROM OrderDetailVatAnal)  \n"
                           + "		DELETE FROM OrdersStaff_Hist WHERE Id IN (SELECT Id FROM OrdersStaff)  \n"
                           + "		DELETE FROM OrderStatus_Hist WHERE Id IN (SELECT Id FROM OrderStatus)  \n"
                           + "		DELETE FROM StoreMessages_Hist WHERE Id IN (SELECT Id FROM StoreMessages)  \n"
                           + "		DELETE FROM TablePaySuggestion_Hist WHERE Id IN (SELECT Id FROM TablePaySuggestion)  \n"
                           + "		DELETE FROM Transactions_Hist WHERE Id IN (SELECT Id FROM Transactions)  \n"
                           + "		DELETE FROM TransferToPms_Hist WHERE Id IN (SELECT Id FROM TransferToPms)  \n"
                           + "		COMMIT TRANSACTION \n"
                           + "      SET @bOK = 1 \n"
                           + "	END TRY  \n"
                           + "	BEGIN CATCH  \n"
                           + "		ROLLBACK TRANSACTION \n"
                           + "      SET @bOK = 0 \n"
                           + "		SELECT  \n"
                           + "			ERROR_NUMBER() AS ErrorNumber,  \n"
                           + "			ERROR_SEVERITY() AS ErrorSeverity,  \n"
                           + "			ERROR_STATE() AS ErrorState,  \n"
                           + "			ERROR_PROCEDURE() AS ErrorProcedure,  \n"
                           + "			ERROR_LINE() AS ErrorLine,  \n"
                           + "			ERROR_MESSAGE() AS ErrorMessage  \n"
                           + "	END CATCH  \n"
                           + "		 \n"
                           + "  IF @bOK = 1 \n"
                           + "  BEGIN \n"
                           + "      /*Reindexing database and try to shrink*/ \n"
                           + "		DECLARE @tables TABLE (ID INT IDENTITY(1,1), tblName VARCHAR(255))  \n"
                           + "        DECLARE @idx INT, @totRec INT, @tblName VARCHAR(255), @logFile VARCHAR(MAX), @DBName VARCHAR(MAX)  \n"
                           + " \n"
                           + "        INSERT INTO @tables  \n"
                           + "        SELECT table_name   \n"
                           + "        FROM INFORMATION_SCHEMA.TABLES   \n"
                           + "        WHERE table_type = 'BASE TABLE'   \n"
                           + " \n"
                           + "        SELECT @idx = MIN(ID), @totRec = MAX(ID) FROM @tables  \n"
                           + "        WHILE @idx <= @totRec  \n"
                           + "        BEGIN  \n"
                           + "        	SELECT @tblName = tblName FROM @tables WHERE ID = @idx  \n"
                           + "        	DBCC DBREINDEX(@tblName,'',90)  \n"
                           + "        	SET @idx = @idx + 1  \n"
                           + "        END	  \n"
                           + "        		  \n"
                           + "        SELECT @DBName = db.name   \n"
                           + "        FROM sys.master_files mf  \n"
                           + "        INNER JOIN  sys.databases db ON db.database_id = mf.database_id  \n"
                           + "        INNER JOIN sys.database_files df ON CAST(df.Physical_Name AS VARCHAR(MAX)) COLLATE DATABASE_DEFAULT = CAST(mf.Physical_Name AS VARCHAR(MAX)) COLLATE DATABASE_DEFAULT AND df.type = 1  \n"
                           + "		BEGIN TRY \n"
                           + "			EXEC('ALTER DATABASE '+@DBName+' SET RECOVERY SIMPLE')  \n"
                           + "			EXEC('DBCC SHRINKFILE ('''+@logFile+''', 10)')  \n"
                           + "			EXEC('ALTER DATABASE '+@DBName+' SET RECOVERY FULL') \n"
                           + "		END TRY \n"
                           + "		BEGIN CATCH \n"
                           + "			SET @idx = 0 \n"
                           + "		END CATCH \n"
                           + " \n"
                           + "		SELECT 0 ErrorNumber,0 ErrorSeverity,0 ErrorState,'OK' ErrorProcedure,0 ErrorLine,'Operation completed Succesfully' ErrorMessage \n"
                           + "  END \n"
                           + "END");
            Ver_2_0_0_6.Add("CREATE PROCEDURE sp_Execute_CloseOfYear( \n"
                           + "    @sql varchar(4000), /*SQL To Execute*/ \n"
                           + "    @jobname varchar(200) = null, /*Job Name to Create Schedule*/  \n"
                           + "    @database varchar(200)= null, /*Database name to Excecute SQL*/ \n"
                           + "    @owner varchar(200) = null ) /*User Name of the Database*/ \n"
                           + "/* \n"
                           + " --------------------------------------------------------------------------------------- \n"
                           + "  Executes a stored procedure asynchronously. \n"
                           + "  ex: \n"
                           + "    execute sp_async_execute 'execute [SetOptins]','RecountChunksJob' \n"
                           + "    execute sp_async_execute 'execute sp_AppendToFile ''j:\\test.txt'', ''somedata'''   \n"
                           + "    execute sp_async_execute 'execute sp_CacheDelete ''webdata\\usd\\*'''  \n"
                           + " --------------------------------------------------------------------------------------- \n"
                           + "*/ \n"
                           + "AS \n"
                           + "BEGIN  \n"
                           + "    SET NOCOUNT ON;  \n"
                           + "  \n"
                           + "    declare @id uniqueidentifier  \n"
                           + " \n"
                           + "    /*Create unique job name if the name is not specified */ \n"
                           + "    if @jobname is null set @jobname= 'async' \n"
                           + "    set @jobname= @jobname + '_' + convert(varchar(64),NEWID()) \n"
                           + "   \n"
                           + "    if @owner is null set @owner = 'sa'  \n"
                           + "    \n"
                           + "    if @database is null set @database=DB_NAME() \n"
                           + " \n"
                           + "    /*Create a new job, get job ID */ \n"
                           + "    execute msdb..sp_add_job @jobname, @owner_login_name=@owner, @job_id=@id OUTPUT  \n"
                           + "  \n"
                           + "    /*Specify a job server for the job */ \n"
                           + "    execute msdb..sp_add_jobserver @job_id=@id  \n"
                           + "  \n"
                           + "    /*Specify a first step of the job - the SQL command  \n"
                           + "      (@on_success_action = 3 ... Go to next step) */ \n"
                           + "    execute msdb..sp_add_jobstep @job_id=@id, @step_name='Step1', @command = @sql,   \n"
                           + "        @database_name = @database, @on_success_action = 3   \n"
                           + "  \n"
                           + "    /*Specify next step of the job - delete the job */ \n"
                           + "    declare @deletecommand varchar(200)  \n"
                           + "    set @deletecommand = 'execute msdb..sp_delete_job @job_name='''+@jobname+''''  \n"
                           + "    execute msdb..sp_add_jobstep @job_id=@id, @step_name='Step2', @command = @deletecommand  \n"
                           + "  \n"
                           + "    /*Start the job */ \n"
                           + "    execute msdb..sp_start_job @job_id=@id  \n"
                           + "END ");
        }
    }
}
